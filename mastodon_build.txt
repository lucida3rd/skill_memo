-----------------------
mastodon インスタンス建立メモ

Lucida（lucida3rd@mstdn.lucida-don.net）
-----------------------
＜概要＞
mastodonインスタンスを建てる方法メモ。
さくらインターネットでCentOSを使った手順です。

◆mastodonを建てるにあたって
◆mastodonを建てる：さくらのクラウド編
◆mastodonを建てる：さくらのVPS編
◆エディタ：vimの導入
◆mastodon外部メディアストレージへの移設→wasabi
◆postgresのスーパバイザパスワードの再設定



---------------------------------
＜注意事項＞
---------------------------------
・斜め読みしないで、各メモの効果、手順をよく確認してください。
  よくわかんないうちは使用しないでください。
・各メモには元ソースのリンクを貼り付けてますので、
  よくわかんないときはそちらも合わせて確認してください。
・このメモを使用したことによる不具合、損害について当方は責任を持ちません。
  全て自己責任でお願いします。
・当メモの質問は受け付けません。自己対応でお願いします。



-----------------------
mastodonを建てるにあたって
-----------------------

さくらインターネットを利用する場合、スタートアップスクリプトがあるので
クラウド初心者でも比較的簡単にインスタンスを建てることができる。
VPSとクラウド、どちらもクラウドサーバだが、利用の仕方によって選択肢がある。

VPS：
・費用が安い。
・クラウドと比べて、同じ値段で性能はこちらが上。
・各項目（CPU、メモリ、SSDなど）が自由に選べない。
・プランのスケールアップ（上位プランの変更）ができる。
　ただしスケールダウンができないっぽい。
・最低3か月は解約できない。
→費用はこちらのが安いので、サーバをカスタムしないのであればこちらがおすすめ。

クラウド：
・費用は少し割高。
・クラウドと比べて、同じ値段で性能が劣る。
・各項目（CPU、メモリ、SSDなど）が自由に選べる。
・ロードバランサなどの高機能が追加できる。
・途中解約は自由（時間割）。
→やり直しが効くので、短期でテスト利用したい人におすすめ。

また、本では外部メディアストレージとして「wasabi」を利用する方法も載せる。
amazon S3より安いと思う。（後述）


-----------------------
＜mastodonを建てる：さくらのクラウド編＞

さくらインターネットのさくらのクラウドを利用する方法。
クラウドサーバを建てるときにmastodonを自動セットアップするスクリプトが選択できるので、比較的簡単に導入できる。
Non-Dockerでnginxも導入される。ので、上手く設定すればwebページも併設できる。

参考
https://knowledge.sakura.ad.jp/8591/


必要なもの
・クレジットカード
・スマートフォン（ワンタイムアプリを動かす。SMSではダメ。）
・Google Authenticator


手順：
1.さくらインターネットの会員登録をする

2.さくらのドメインでmastodonで使うドメインを取得する
　→この時に支払いのクレジットカードを登録する

3.さくらのクラウドアカウントを作成する（会員とは別）
　→ワンタイムパスワードの設定が必須
　→作るだけならこの時点では課金対象外

4.さくらのクラウドでDNSの設定をする
　→左上のゾーンは「石狩」を選択する（こっちのが安い）
　→2で取得したドメインを登録する
　→設定後に出るDNSゾーン情報（２個）をメモしておくこと

5.ドメインコントローラー（さくら会員の契約ドメインページ）でゾーン設定をおこなう
　ドメインメニュー→Whois情報で、ネームサーバ1,2に4で得たDNSゾーン情報を設定する
　→設定が反映されるのに2時間くらいかかる

6.公開鍵を作成する
　1)DOSプロンプトを開く
　2)ssh-keygen -t rsa
　3)鍵の出力パス、ファイルが設定できる。変更しないならそのままenter。
　　デフォルトの出力先は、
　　<ユーザディレクトリ>\.ssh
    ※複数鍵を作る場合はここでファイル分けしておく
　4)パスフレーズを設定しenter。（2回）
　　以下のように出力されれば成功。
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
　　※ファイルは消したほうがいいって話だけど、TeraTermなどからログインするのに必要なので。
    参考情報：https://qiita.com/0084ken/items/2e4e9ae44ec5e01328f1

7.公開鍵を設定する
　→さくらのクラウドに戻って、リソースマネージャー→公開鍵で、識別キーを追加する。
　　1)追加を選択
　　2)公開鍵に /root/.ssh/id_rsa.pubの内容 ssh-rsaで始まるキーを全てコピペする。
　→さくらのクラウドに戻って、リソースマネージャー→公開鍵で、公開鍵を追加する。
　　1)生成を選択
　　2)パスフレーズは6で設定したパスフレーズを入力。
　→秘密鍵（証明書）はダウンロードして、わかりやすいフォルダに保存しておく。

8.APIキーを作成する
　7の設定が上手くいくとAPIキーが作成できるので、作成する。
　ホームに戻り、APIキーを選択。追加から。
　名前はわかりやすいものをつけておくほうがよい。他はいじらなくていい。
　アクセストークンとトークンシークレットは控えておく。

9.サーバを作成する
　シンプルモードをOFFする。

　ディスク容量
　アーカイブ：CentOS 7.5を選択
　名前は分かりやすいものをつける。

　管理ユーザのパスワード：rootのパスワード
　SSD：必要に応じて。
　メモリ：必要に応じて。

　ディスクを修正
　管理ユーザのパスワード：rootのパスワード
　ホスト：ホスト名
　スタートアップスクリプト：mastodonを選択
　APIキー：8で作成したキーを選択する

　すぐに起動をチェックして、作成。
　ステータス上は「完了」と出るが、これはサーバの作成のこと。
　mastodonの作成はかなり時間がかかるので、時間を置くこと。（2時間くらい見ておいたほうが無難）

10.mastodonの設定をする
　Webブラウザで「https://＜ドメイン＞/」にアクセスする。
　mastodonのログインページがでたらOK。
　でなかったらまだmastodon作成中なので、時間を置いて待つ。
　※ここで慌てないこと！
　2時間置いても出なかったら設定に問題あるかも？

　1)まずは普通にmastodonのアカウントを作成する。
　2)DOSやクライアントからサーバにログインする。
　　dosの場合：ssh root@<ドメインアドレス>
    公開鍵を指定する場合は-iオプションを付ける
    ssh root@<ドメインアドレス> -i <ファイルの絶対パス>
    ※常に鍵を指定しておいたほうが安全かも
  3)rootパスワードを入力。
　4)以下で、1)で作成したアカウントを管理者に昇格させる。
su - mastodon
cd live
RAILS_ENV=production bundle exec rails mastodon:make_admin USERNAME=<1)のユーザID>

以下のようなメッセージがでれば成功。
Congrats! <ユーザID> is now an admin. \o/
Navigate to https://<ドメインアドレス>/admin/settings to get started

　4) 1)のユーザでmastodonに再ログインすると、管理者メニューが使えるようになる。


-----------------------
＜mastodonを建てる：さくらのVPS編＞

さくらインターネットのさくらのVPSを利用する方法。
クラウドサーバを建てるときにmastodonを自動セットアップするスクリプトが選択できるので、比較的簡単に導入できる。
Non-Dockerでnginxも導入される。ので、上手く設定すればwebページも併設できる。

必要なもの
・クレジットカード
・スマートフォン（ワンタイムアプリを動かす。SMSではダメ。）
・Google Authenticator


手順：
1.さくらインターネットの会員登録をする

2.さくらのVPSから利用申請する
　メニューから本登録しておく。（料金発生）
　（しておかないと、mastodonのメール認証ができず、ログインできなくなる）

3.さくらのドメインでmastodonで使うドメインを取得する
　→この時に支払いのクレジットカードを登録する

4.会員ページからコントローラに移動する

5.OSインストールを選択
　OS：CentOS7
　パスワード；rootのパスワード
　スタートアップスクリプト：mastodon
　ドメイン：mastodonで使うドメイン名
　　　　　　※サブドメインも有効

  ※稼働中になってもセットアップは終わってないので、
　　1時間以上はTeraTermなどでログインしないこと。
    待ってる間、7まで進められる。

6.各種設定>ホスト名逆引き登録でドメインを設定する
　カスタムでドメイン名（サブドメイン抜き）を登録。

7.会員メニュー>ドメイン>ゾーン表示でDNSの設定をする
TTLはチェックする

@ A [サーバIP]  5)で分かる
@ MS 10 @
@ TXT v=spf1 +ip4:[サーバIP] -all

サブドメインを運用する場合はAレコードを追加しておく
[サブドメイン名] A [サーバIP]  5)で分かる

MXレコード（メール用）は設定するドメインによって異なる
サブドメインなし：
@ MS 10 [ドメイン名]
サブドメインあり：
[サブドメイン名] MS 10 [サブドメインを含むフルドメイン]

8.公開鍵を作成する
　1)DOSプロンプトを開く
　2)ssh-keygen -t rsa
　3)鍵の出力パス、ファイルが設定できる。変更しないならそのままenter。
　　デフォルトの出力先は、
　　<ユーザディレクトリ>\.ssh
    ※複数鍵を作る場合はここでファイル分けしておく
　4)パスフレーズを設定しenter。（2回）
　　以下のように出力されれば成功。
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
　　※ファイルは消したほうがいいって話だけど、TeraTermなどからログインするのに必要なので。
    参考情報：https://qiita.com/0084ken/items/2e4e9ae44ec5e01328f1

  ※終わったらしばらく待つ

9.mastodonの設定をする
　Webブラウザで「https://＜ドメイン＞/」にアクセスする。
　mastodonのログインページがでたらOK。
　でなかったらまだmastodon作成中なので、時間を置いて待つ。
　※ここで慌てないこと！
　2時間置いても出なかったら設定に問題あるかも？

　1)まずは普通にmastodonのアカウントを作成する。
　2)DOSやクライアントからサーバにログインする。
　　dosの場合：ssh root@<ドメインアドレス>
    公開鍵を指定する場合は-iオプションを付ける
    ssh root@<ドメインアドレス> -i <ファイルの絶対パス>
    ※常に鍵を指定しておいたほうが安全かも
  3)rootパスワードを入力。
　4)以下で、1)で作成したアカウントを管理者に昇格させる。
su - mastodon
cd live
RAILS_ENV=production bundle exec rails mastodon:make_admin USERNAME=<1)のユーザID>

以下のようなメッセージがでれば成功。
Congrats! <ユーザID> is now an admin. \o/
Navigate to https://<ドメインアドレス>/admin/settings to get started

　4) 1)のユーザでmastodonに再ログインすると、管理者メニューが使えるようになる。



-----------------------
＜エディタ：vimの導入＞
現在入っている Vim エディタを確認します。
$ yum list installed | grep vim

vimをインストールするのに必要なパッケージをインストールします。
$ yum install mercurial
$ yum install ncurses-devel
$ yum install make
$ yum install gcc

ソースビルドでのインストールを行います。
$ su
パスワード：（ root のパスワードを入力）
$ cd /usr/local/src
$ hg clone https://bitbucket.org/vim-mirror/vim vim

vimのインストール
$ cd vim
$ sudo ./configure --with-features=huge --enable-multibyte --disable-selinux
$ sudo make
$ sudo make install



-----------------------
＜mastodon外部メディアストレージへの移設→wasabi＞

参考
https://angristan.xyz/moving-mastodon-media-files-to-wasabi-object-storage/

てかここに全部書いてあるので概要をざっと。

mastodon鯖は、連合で認識したユーザがもつメディアを鯖内に保持する仕様になっている。
つまり連合のユーザを認識すればするほどメディアファイルが増えていき、ディスク容量を
圧迫することになる。
極端にローカルな鯖であれば、定期的なディスククリーンアップで対応できるが、認識外で
鯖の接続数が増えるとやがて対応しきれない。ディスク容量を増やすにしても資金的、物理的
にも限界があるだろう。

そこで、メディアファイルだけ外部のオブジェクトストレージを使う方法がある。

mastodonはデフォルトでamazonのs3サービスに対応していて、キーさえ取得できればすぐに
外部メディアストレージ化が始められる。今回はknzk.meでも採用されている「wasabi」へ
移設する方法を示す。手順はs3とほぼ変わらない上、こちらのほうが安い（営業妨害だ）
https://wasabi.com/pricing/

またwasabiは30日間/1TBの無料期間がある。


プロキシサーバはmastodonサービスが画像をwasabiに転送したり、ユーザが画像にアクセスする
ときに中継する役割をする。（s3ドライバから見るとホストになる）

メディアへのアクセスは以下のようになる。

・mastodonへ画像を投稿、あるいはタイムラインから画像を受信する。
　↓
・mastodonがwasabiのストレージ上に転送（ここに画像データを置く）

・ユーザがプロキシのアドレスで画像リンクへアクセス
　↓
・プロキシサーバにアクセスされる（自前バーチャル鯖）
　↓
・wasabiの画像ストレージ上の画像にアクセス（ここに画像データがある）


★ここで紹介する手順は記事と違って、プロキシサーバを自前で用意することとする。
　またプロキシサーバはサブドメインで運用する。


1.プロキシサーバ用にDNSにサブドメインを登録する。
　さくらインターネットの場合、ドメインコントローラから設定する。
　（上記「mastodonを建てる」参考）

@ A [サーバIP]
[サブドメイン名] A [サーバIP]

  ここで設定したサブドメイン＋ドメイン名が、プロキシサーバのドメイン名となる。
  以下【仮想鯖名】とする。

2.サブドメイン用にSSL証明書を発行する。
  やり方が分からない場合、mastodon_memo.txtの「SSL証明書の編集：サブドメインの追加」参考。


3.wasabiでユーザ登録する。

4.「strage」画面でバケツ（画像を入れるプロジェクトフォルダのようなもの）を作る。
　名前はわかりやすいもので。
　名前はメモしておく。

5.バケツのポリシーに以下を貼り付けてセーブする。
　バケツ名はエディタで編集してからにする。

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "AddPerm",
      "Effect": "Allow",
      "Principal": {
        "AWS": "*"
      },
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::【バケツ名】/*"
    }
  ]
}

6.IAM→USERから、mastodonがバケツにアクセスするユーザを作成する。
　Programmaticをチェックしておく。
　作成時に表示されるAPI Key、Secret API Keyはメモしておくこと。

7.IAM→POLICYから、6のユーザの専用ポリシーを作る。内容は以下。
　ポリシー名はわかりやすい名前で。
　バケツ名はエディタで編集してからにする。

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "s3:ListBucket",
      "Resource": "arn:aws:s3:::【バケツ名】"
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:PutObject",
        "s3:GetObject",
        "s3:DeleteObject"
      ],
      "Resource": "arn:aws:s3:::【バケツ名】*"
    }
  ]
}

8.IAM→USERで4のユーザのPERMISSIONSで6のポリシーを追加する。

9.サーバのコンソールにログインする。（root権限のままでok）
　mastodonのliveフォルダに移動する。
　# cd /home/mastodon/live

　pipでwasabiへのアップローダaws-cliをインストールする。
　# pip install awscli

　バージョンが表示されればOK。
　# aws --version
　aws-cli/1.15.26 Python/2.7.13 Linux/4.9.0-6-amd64 botocore/1.10.26

10.aws-cliに6で取得したアクセスキーを設定する。
　# aws configure
　AWS Access Key ID [None]: 【API KEY】
　AWS Secret Access Key [None]: 【SECRET API KEY】
　Default region name [None]:（空欄）
　Default output format [None]:（空欄）

11.古いキャッシュを掃除しておく。
　# su - mastodon
　$ cd live
　$ RAILS_ENV=production bundle exec rake mastodon:media:remove_remote
　$ exit

12.mastodonとバケツを同期する。かなり時間がかかります。
　# aws s3 sync public/system/ s3://【バケツ名】/ --endpoint-url=https://s3.wasabisys.com

13.nginxにキャッシュ用のプロクシサーバ（mastodonやユーザの中継サーバ）を設定する。
　# vim /etc/nginx/conf.d/https.conf

　http層の中にまるまるコピー。バケツ名は各自で。

proxy_cache_path /tmp/nginx_mstdn_media levels=1:2 keys_zone=【バケツ名】:100m max_size=1g inactive=24h;

server {
    listen 80;
    listen [::]:80;
    server_name 【仮想鯖名】;
    return 301 https://media.mstdn.io$request_uri;
    access_log /dev/null;
    error_log /dev/null;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name 【仮想鯖名】;

	ssl_protocols TLSv1.2;
	ssl_ciphers EECDH+AESGCM:EECDH+AES;
	ssl_ecdh_curve prime256v1;
	ssl_prefer_server_ciphers on;
	ssl_session_cache shared:SSL:10m;
	ssl_certificate /etc/letsencrypt/live/【仮想鯖名】/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/【仮想鯖名】/privkey.pem;

    access_log /var/log/nginx/mstdn-media-access.log;
    error_log /var/log/nginx/mstdn-media-error.log;

    location / {
            proxy_cache 【バケツ名】;
            proxy_cache_revalidate on;
            proxy_buffering on;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            proxy_cache_lock on;
            proxy_cache_valid 1d;
            proxy_cache_valid 404 1h;
            proxy_ignore_headers Cache-Control;
            add_header X-Cached $upstream_cache_status;
            proxy_pass https://s3.wasabisys.com/;
    }
}

14.nginxを再起動する。
　# sudo nginx -s reload

　エラーがでなければOK。

15.mastodonのコンフィグにバケツのアクセスキーを設定する。
　# vim .env.production

S3_ENABLED=true
S3_BUCKET=【バケツ名】
AWS_ACCESS_KEY_ID=【API Key】
AWS_SECRET_ACCESS_KEY=【Secret API Key】
S3_REGION=【バケツのRegion】
S3_PROTOCOL=https
S3_HOSTNAME=【仮想鯖名】
S3_ENDPOINT=https://s3.wasabisys.com/

16.mastodonとバケツを同期する。差分だけの同期になる。
　# aws s3 sync public/system/ s3://【バケツ名】/ --endpoint-url=https://s3.wasabisys.com

17.mastodonを再起動する。
　# systemctl restart mastodon*

18.キャッシュが有効かを確認する。
　# curl -I https://media.mstdn.io/【バケツ名】/media_attachments/files/001/871/825/original/f35282636242f8c7.jpg
HTTP/2 200
以下～

19.public/system以下のフォルダを削除する。（ローカル画像キャッシュ。もう不要のため）



-----------------------
＜postgresのスーパバイザパスワードの再設定＞

さくらのスクリプトを使ったセットアップだとpostgresのスーパバイザパスワードが設定されない。
postgresの仕様でパスワードなしユーザでのログインは拒否となるのでセキュリティの問題はないが、
新規ユーザを作成する際などのスーパバイザ操作ができなくなる。

そこで以下の手順でパスワードをリセットしておくことをお勧めする。

1.postgresのconfigで認証方式をtrustに書き換える。
# cd cd /var/lib/pgsql/[バージョン]/data
# vim pg_hba.conf

以下★印の2か所
------
# TYPE  DATABASE        USER            ADDRESS                 METHOD
###local   all             all                                     peer
local   all             all                                     trust	★
# IPv4 local connections:
###host    all             all             127.0.0.1/32            ident
host    all             all             127.0.0.1/32            trust	★
------

2.サーバをリブートする。

3.postgresにログインする。
# psql -U postgres

4.パスワードを書き換える。

postgres=> [新しいパスワード]
postgres=> alter role postgres with password '[新しいパスワード]';
ここで ALTER ROLE が出ればOK。
postgres=> \q

5. 1で書き換えたpostgresの認証方式を元に戻す。

6.サーバをリブートする。

7.接続テスト。
# psql -h localhost -U postgres -d mastodon
ここで4で入力したパスワードでログインする。

mastodon=>

のプロンプトがでればOK。

mastodon=> \q



