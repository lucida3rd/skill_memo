-----------------------
mastodon インスタンス建立メモ

Lucida（lucida3rd@mstdn.lucida-memo.info）
-----------------------
＜概要＞
mastodonインスタンスを建てる方法メモ。
さくらインターネットでCentOSを使った手順です。

mastodon本体とその周辺のセットアップ
　◆mastodonを建てるにあたって
　◆mastodonを建てる：さくらのクラウド編
　◆mastodonを建てる：さくらのVPS編

サーバの追加設定
　◆mastodon外部メディアストレージへの移設→wasabi
　◆postgresのスーパバイザパスワードの再設定

その他おまけ
　◆エディタ：vimの導入（vimがインストールされなかった場合）
  ◆phpの導入
  ◆Zabbixの導入


---------------------------------
＜注意事項＞
---------------------------------
・斜め読みしないで、各メモの効果、手順をよく確認してください。
  よくわかんないうちは使用しないでください。
・各メモには元ソースのリンクを貼り付けてますので、
  よくわかんないときはそちらも合わせて確認してください。
・このメモを使用したことによる不具合、損害について当方は責任を持ちません。
  全て自己責任でお願いします。
・当メモの質問は受け付けません。自己対応でお願いします。



-----------------------
mastodonを建てるにあたって
-----------------------

さくらインターネットを利用する場合、スタートアップスクリプトがあるので
クラウド初心者でも比較的簡単にインスタンスを建てることができる。
VPSとクラウド、どちらもクラウドサーバだが、利用の仕方によって選択肢がある。

VPS：
・費用が安い。
・クラウドと比べて、同じ値段で性能はこちらが上。
・各項目（CPU、メモリ、SSDなど）が自由に選べない。
・プランのスケールアップ（上位プランの変更）ができる。
　ただしスケールダウンができないっぽい。
・最低3か月は解約できない。
→費用はこちらのが安いので、サーバをカスタムしないのであればこちらがおすすめ。

クラウド：
・費用は少し割高。
・クラウドと比べて、同じ値段で性能が劣る。
・各項目（CPU、メモリ、SSDなど）が自由に選べる。
・ロードバランサなどの高機能が追加できる。
・途中解約は自由（時間割）。
→やり直しが効くので、短期でテスト利用したい人におすすめ。

また、本では外部メディアストレージとして「wasabi」を利用する方法も載せる。
amazon S3より安いと思う。（後述）


-----------------------
＜mastodonを建てる：共通前処理＞

本家リポジトリを自分のリポジトリにFork（コピー）したソースでバージョンアップする手順。
※Originalでバージョンアップする場合は本手順は不要。


参考：
https://snap.textfile.org/20170509111842/
https://snap.textfile.org/20170509104726/
https://techacademy.jp/magazine/10268

本家にタグがつくタイミングでリリース以降のissueを適用することができる（所謂master追従）。
しかしissueに何らかの問題があれば安定性は失われるかも？
以下のようにソースコードをマージしていくイメージ。
  https://files.mastodon.social/media_attachments/files/009/450/158/original/da26013841172fb4.jpg

なお前提としてgithubデスクトップを使う手順となる。（自PCはWindows）
また前準備として後半の操作をおこなうこと。

1.githubのアカウントを作成する。
  https://github.com

2.githubデスクトップをインストールする。
  https://desktop.github.com

3.githubの自分のアカウントに本家リポジトリをFork（コピー）する。
  https://github.com/tootsuite/mastodon/releases
  の右上あたりの[Fork]ボタンを押す。
  すると、自分のアカウントに[自垢名 / mastodon]というリポジトリができる。

4.githubデスクトップで1項でForkしたリポジトリから自PCにクローンをダウンロードする。
  githubデスクトップのCurrent repository→Add→Clone
  任意のフォルダを選択してCloneを押す。

5.自分のブランチを作る。
  githubデスクトップのCurrent branch→New branchで任意の名前を入力。


-----------------------
＜mastodonを建てる：さくらのクラウド編＞

さくらインターネットのさくらのクラウドを利用する方法。
クラウドサーバを建てるときにmastodonを自動セットアップするスクリプトが選択できるので、比較的簡単に導入できる。
Non-Dockerでnginxも導入される。ので、上手く設定すればwebページも併設できる。

参考
https://knowledge.sakura.ad.jp/8591/


必要なもの
・クレジットカード
・スマートフォン（ワンタイムアプリを動かす。SMSではダメ。）
・Google Authenticator


手順：
1.さくらインターネットの会員登録をする

2.さくらのドメインでmastodonで使うドメインを取得する
　→この時に支払いのクレジットカードを登録する

3.さくらのクラウドアカウントを作成する（会員とは別）
　→ワンタイムパスワードの設定が必須
　→作るだけならこの時点では課金対象外

4.さくらのクラウドでDNSの設定をする
　→左上のゾーンは「石狩」を選択する（こっちのが安い）
　→2で取得したドメインを登録する
　→設定後に出るDNSゾーン情報（２個）をメモしておくこと

5.ドメインコントローラー（さくら会員の契約ドメインページ）でゾーン設定をおこなう
　ドメインメニュー→Whois情報で、ネームサーバ1,2に4で得たDNSゾーン情報を設定する
　→設定が反映されるのに2時間くらいかかる

6.公開鍵を作成する
　1)DOSプロンプトを開く
　2)ssh-keygen -t rsa
　3)鍵の出力パス、ファイルが設定できる。変更しないならそのままenter。
　　デフォルトの出力先は、
　　<ユーザディレクトリ>\.ssh
    ※複数鍵を作る場合はここでファイル分けしておく
　4)パスフレーズを設定しenter。（2回）
　　以下のように出力されれば成功。
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
　　※ファイルは消したほうがいいって話だけど、TeraTermなどからログインするのに必要なので。
    参考情報：https://qiita.com/0084ken/items/2e4e9ae44ec5e01328f1

7.公開鍵を設定する
　→さくらのクラウドに戻って、リソースマネージャー→公開鍵で、識別キーを追加する。
　　1)追加を選択
　　2)公開鍵に /root/.ssh/id_rsa.pubの内容 ssh-rsaで始まるキーを全てコピペする。
　→さくらのクラウドに戻って、リソースマネージャー→公開鍵で、公開鍵を追加する。
　　1)生成を選択
　　2)パスフレーズは6で設定したパスフレーズを入力。
　→秘密鍵（証明書）はダウンロードして、わかりやすいフォルダに保存しておく。

8.APIキーを作成する
　7の設定が上手くいくとAPIキーが作成できるので、作成する。
　ホームに戻り、APIキーを選択。追加から。
　名前はわかりやすいものをつけておくほうがよい。他はいじらなくていい。
　アクセストークンとトークンシークレットは控えておく。


9.スタートアップスクリプトを改造する（★Master追従の場合のみ）
L6 ：DOMAIN=[mastodonドメイン名]
L41：git clone [自分のgithubリポジトリのパス].git live
     例：git clone https://github.com/lucida3rd/mastodon.git live

これをカスタムスクリプトとしてさくらインターネットに登録する。


10.サーバを作成する
　シンプルモードをOFFする。

　ディスク容量
　アーカイブ：CentOS 7.5を選択
　名前は分かりやすいものをつける。

　管理ユーザのパスワード：rootのパスワード
　SSD：必要に応じて。
　メモリ：必要に応じて。

　ディスクを修正
　管理ユーザのパスワード：rootのパスワード
　ホスト：ホスト名
　スタートアップスクリプト：mastodonを選択（★Master追従の場合、9項のスクリプトを選ぶ）
　APIキー：8で作成したキーを選択する

　すぐに起動をチェックして、作成。
　ステータス上は「完了」と出るが、これはサーバの作成のこと。
　mastodonの作成はかなり時間がかかるので、時間を置くこと。（2時間くらい見ておいたほうが無難）

11.mastodonにアクセスする
　Webブラウザで「https://＜ドメイン＞/」にアクセスする。
　mastodonのログインページがでたらOK。
　でなかったらまだmastodon作成中なので、時間を置いて待つ。
　※ここで慌てないこと！
　2時間置いても出なかったら設定に問題あるかも？

12.★Master追従の場合、バージョンアップ手順でmastodonバージョンアップをおこなう。


-----------------------
＜mastodonを建てる：さくらのVPS編＞

さくらインターネットのさくらのVPSを利用する方法。
クラウドサーバを建てるときにmastodonを自動セットアップするスクリプトが選択できるので、比較的簡単に導入できる。
Non-Dockerでnginxも導入される。ので、上手く設定すればwebページも併設できる。

必要なもの
・クレジットカード
・スマートフォン（ワンタイムアプリを動かす。SMSではダメ。）
・Google Authenticator


手順：
1.さくらインターネットの会員登録をする

2.さくらのVPSから利用申請する
　メニューから本登録しておく。（料金発生）
　（しておかないと、mastodonのメール認証ができず、ログインできなくなる）

3.さくらのドメインでmastodonで使うドメインを取得する
　→この時に支払いのクレジットカードを登録する

4.会員ページからコントローラに移動する


5.スタートアップスクリプトを改造する（★Master追従の場合のみ）
L6 ：DOMAIN=[mastodonドメイン名]
L41：git clone [自分のgithubリポジトリのパス].git live
     例：git clone https://github.com/lucida3rd/mastodon.git live

これをカスタムスクリプトとしてさくらインターネットに登録する。


6.OSインストールを選択
　OS：CentOS7
　パスワード；rootのパスワード
　スタートアップスクリプト：mastodon（★Master追従の場合、5項のスクリプトを選ぶ）
　ドメイン：mastodonで使うドメイン名
　　　　　　※サブドメインも有効

  ※稼働中になってもセットアップは終わってないので、
　　1時間以上はTeraTermなどでログインしないこと。
    待ってる間、7まで進められる。

7.各種設定>ホスト名逆引き登録でドメインを設定する
　カスタムでドメイン名（サブドメイン抜き）を登録。

8.会員メニュー>ドメイン>ゾーン表示でDNSの設定をする
TTLはチェックする

@ A [サーバIP]  5)で分かる
@ MS 10 @
@ TXT v=spf1 +ip4:[サーバIP] -all

サブドメインを運用する場合はAレコードを追加しておく
[サブドメイン名] A [サーバIP]  5)で分かる

MXレコード（メール用）は設定するドメインによって異なる
サブドメインなし：
@ MS 10 [ドメイン名]
サブドメインあり：
[サブドメイン名] MS 10 [サブドメインを含むフルドメイン]


9.公開鍵を作成する
　1)DOSプロンプトを開く
　2)ssh-keygen -t rsa
　3)鍵の出力パス、ファイルが設定できる。変更しないならそのままenter。
　　デフォルトの出力先は、
　　<ユーザディレクトリ>\.ssh
    ※複数鍵を作る場合はここでファイル分けしておく
　4)パスフレーズを設定しenter。（2回）
　　以下のように出力されれば成功。
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
　　※ファイルは消したほうがいいって話だけど、TeraTermなどからログインするのに必要なので。
    参考情報：https://qiita.com/0084ken/items/2e4e9ae44ec5e01328f1

  ※終わったらしばらく待つ

10.mastodonにアクセスする
　Webブラウザで「https://＜ドメイン＞/」にアクセスする。
　mastodonのログインページがでたらOK。
　でなかったらまだmastodon作成中なので、時間を置いて待つ。
　※ここで慌てないこと！
　2時間置いても出なかったら設定に問題あるかも？


11.★Master追従の場合、バージョンアップ手順でmastodonバージョンアップをおこなう。


-----------------------
＜mastodonを建てる：共通後処理＞

◆管理者アカウントを登録する
1.Webブラウザで「https://＜ドメイン＞/」にアクセスしてユーザを登録する。

2.クライアントから鯖にログインする。
dosのプロンプトからの例。
> ssh root@[ホストIPアドレス] -i [秘密鍵(拡張子がない)のパス]
  例：ssh root@xxx.xxx.xxx.xxx -i C:\Users\User1\.ssh\id_kagi

3. 1のユーザを管理者に昇格させる
# su - mastodon
$ cd live
$ RAILS_ENV=production bin/tootctl accounts modify <1のユーザID> --role admin

OKがでれば成功。


◆mastodonユーザのパスワードリセット

1.CentOSのパスワードを設定する。
# passwd mastodon
パスワードを設定する。

2.postgreSQLのパスワードを設定する。
# su - mastodon
$ psql

mastodon=> alter role mastodon with password '[パスワード]';
ALTER ROLEと出ればOK。

mastodon=> \q


◆postgresユーザのパスワードリセット

1.CentOSのパスワードを設定する。
# passwd postgres
パスワードを設定する。

※postgreSQLのpostgresはスーパーバイザなので少し手順が異なる。

3.postgresのconfigで認証方式をtrustに書き換える。
# vi /var/lib/pgsql/[バージョン]/data/pg_hba.conf
  vi /var/lib/pgsql/9.6/data/pg_hba.conf

以下★印の2か所
------
# TYPE  DATABASE        USER            ADDRESS                 METHOD
###local   all             all                                     peer
local   all             all                                     trust	★
# IPv4 local connections:
###host    all             all             127.0.0.1/32            ident
host    all             all             127.0.0.1/32            trust	★
------

4.サーバをリブートする。

5.postgresにログインする。
# psql -U postgres

6.パスワードを書き換える。
postgres=> alter role postgres with password '[新しいパスワード]';
ここで ALTER ROLE が出ればOK。
postgres=> \q

7. 2で書き換えたpostgresの認証方式を元に戻す。

8.サーバをリブートする。

9.接続テスト。
# psql -h localhost -U postgres -d mastodon
ここで6で入力したパスワードでログインする。（※認証方式がtrustの場合はパスワードはいらない）

mastodon=>

のプロンプトがでればOK。

mastodon=> \q


◆mastodonユーザでsudoを使えるようにする（※オプション）

参考：
https://qiita.com/pakiln/items/525b0b635b57bf310837

1.visudoを実行。
# visudo

2.rootの下にsudo権限を追加
root    ALL=(ALL)       ALL
mastodon    ALL=(ALL)       ALL   ←追加


-----------------------
＜mastodon外部メディアストレージへの移設→wasabi＞

参考
https://angristan.xyz/moving-mastodon-media-files-to-wasabi-object-storage/

てかここに全部書いてあるので概要をざっと。

mastodon鯖は、連合で認識したユーザがもつメディアを鯖内に保持する仕様になっている。
つまり連合のユーザを認識すればするほどメディアファイルが増えていき、ディスク容量を
圧迫することになる。
極端にローカルな鯖であれば、定期的なディスククリーンアップで対応できるが、認識外で
鯖の接続数が増えるとやがて対応しきれない。ディスク容量を増やすにしても資金的、物理的
にも限界があるだろう。

そこで、メディアファイルだけ外部のオブジェクトストレージを使う方法がある。

mastodonはデフォルトでamazonのs3サービスに対応していて、キーさえ取得できればすぐに
外部メディアストレージ化が始められる。今回はknzk.meでも採用されている「wasabi」へ
移設する方法を示す。手順はs3とほぼ変わらない上、こちらのほうが安い（営業妨害だ）
https://wasabi.com/pricing/

またwasabiは30日間/1TBの無料期間がある。


プロキシサーバはmastodonサービスが画像をwasabiに転送したり、ユーザが画像にアクセスする
ときに中継する役割をする。（s3ドライバから見るとホストになる）

メディアへのアクセスは以下のようになる。

・mastodonへ画像を投稿、あるいはタイムラインから画像を受信する。
　↓
・mastodonがwasabiのストレージ上に転送（ここに画像データを置く）

・ユーザがプロキシのアドレスで画像リンクへアクセス
　↓
・プロキシサーバにアクセスされる（自前バーチャル鯖）
　↓
・wasabiの画像ストレージ上の画像にアクセス（ここに画像データがある）


★ここで紹介する手順は記事と違って、プロキシサーバを自前で用意することとする。
　またプロキシサーバはサブドメインで運用する。
　またさくらの場合、SSL証明は無料のLetsEncriptを使うが、スクリプトからだとメディアサーバ側の
　SSL証明書は取ってくれない設定になってるため、設定後にSSL証明書エラーになる。
  この辺もクリアできる手順となっている。


1.メディアサーバ用にDNSにサブドメインを登録する。
　さくらインターネットの場合、ドメインコントローラから設定する。
　（上記「mastodonを建てる」参考）

@ A [サーバIP]
[サブドメイン名] A [サーバIP]

  ここで設定したサブドメイン＋ドメイン名が、メディアサーバのドメイン名となる。
  以下【仮想鯖名】とする。

2.wasabiでユーザ登録する。

3.「strage」画面でバケツ（画像を入れるプロジェクトフォルダのようなもの）を作る。
　名前はわかりやすいもので。名前はメモしておく。
　regionはここでは「us-west-1」を指定する。
　※regionが異なると、以降の11項、15項のエンドポイントの指定が異なることに注意すること。
　　（regionが異なると、バケツが置いてある鯖が異なるためらしい）

4.バケツのポリシーに以下を貼り付けてセーブする。
　バケツ名はエディタで編集してからにする。

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "AddPerm",
      "Effect": "Allow",
      "Principal": {
        "AWS": "*"
      },
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::【バケツ名】/*"
    }
  ]
}

5.IAM→USERから、mastodonがバケツにアクセスするユーザを作成する。
　Programmaticをチェックしておく。
　作成時に表示されるAPI Key、Secret API Keyはメモしておくこと。

6.IAM→POLICYから、6のユーザの専用ポリシーを作る。内容は以下。
　ポリシー名はわかりやすい名前で。
　バケツ名はエディタで編集してからにする。

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "s3:ListBucket",
      "Resource": "arn:aws:s3:::【バケツ名】"
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:PutObject",
        "s3:GetObject",
        "s3:DeleteObject"
      ],
      "Resource": "arn:aws:s3:::【バケツ名】/*"
    }
  ]
}

7.IAM→USERで4のユーザのPERMISSIONSで6のポリシーを追加する。

8.サーバのコンソールにログインする。（root権限のままでok）
　mastodonのliveフォルダに移動する。
　# cd /home/mastodon/live

　pipでwasabiへのアップローダaws-cliをインストールする。
　# pip install awscli

　バージョンが表示されればOK。
　# aws --version
　aws-cli/1.15.26 Python/2.7.13 Linux/4.9.0-6-amd64 botocore/1.10.26

9.aws-cliに6で取得したアクセスキーを設定する。
　# aws configure
　AWS Access Key ID [None]: 【API KEY】
　AWS Secret Access Key [None]: 【SECRET API KEY】
　Default region name [None]:us-west-1
　Default output format [None]:json

10.古いキャッシュを掃除しておく。
　# su - mastodon
　$ cd live
  $ RAILS_ENV=production bin/tootctl media remove
　$ exit

11.mastodonとバケツを同期する。かなり時間がかかります。
　# aws s3 sync public/system/ s3://【バケツ名】/ --endpoint-url=https://s3.us-west-1.wasabisys.com

　※regionがus-west-1でない場合、endpoint-urlの指定が異なるので、
　　wasabiのサポートに問い合わせること。（HPには書いていない）

12.ダミーフォルダを作成する。
  適当なところへ。
  # cd /home
  # mkdir media_dummy

13.nginxにキャッシュ用のプロキシサーバ（mastodonやユーザの中継サーバ）を設定する。
　アクセスとして、mastodonページ→プロキシ（リダイレクト）→メディアサーバとなる。
　# vim /etc/nginx/conf.d/https.conf

　http層の中にまるまるコピー。
  【バケツ名】は4項でwasabiに設定したバケツ名。
　【仮想鯖名】は1項でDNSに設定したサブドメイン名。
　【mastodonドメイン名】はmastodonのドメイン名。

proxy_cache_path /tmp/nginx_mstdn_media levels=1:2 keys_zone=【バケツ名】:100m max_size=1g inactive=24h;

server {
    listen 80;
    listen [::]:80;
    server_name 【仮想鯖名】;
    return 301 https://$server_name$request_uri;
    access_log /dev/null;
    error_log /dev/null;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name 【仮想鯖名】;

	ssl_protocols TLSv1.2;
	ssl_ciphers EECDH+AESGCM:EECDH+AES;
	ssl_ecdh_curve prime256v1;
	ssl_prefer_server_ciphers on;
	ssl_session_cache shared:SSL:10m;
	ssl_certificate /etc/letsencrypt/live/【mastodonドメイン名】/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/【mastodonドメイン名】/privkey.pem;

    access_log /var/log/nginx/mstdn-media-access.log;
    error_log /var/log/nginx/mstdn-media-error.log;

	ssl_stapling on;
	ssl_stapling_verify on;
	resolver 8.8.8.8 8.8.4.4;
	location ^~ /.well-known/acme-challenge/ {
		root /home/media_dummy;
	}
	location = /.well-known/acme-challenge/ {
		return 404;
	}

    location / {
        proxy_cache 【バケツ名】;
        proxy_cache_revalidate on;
        proxy_buffering on;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        proxy_cache_valid 1d;
        proxy_cache_valid 404 1h;
        proxy_ignore_headers Cache-Control;
        add_header X-Cached $upstream_cache_status;
        proxy_pass https://s3.us-west-1.wasabisys.com/;
    }
}

14.nginxを再起動する。
　# sudo nginx -s reload
　エラーがでなければOK。

15.mastodonのコンフィグにバケツのアクセスキーを設定する。
　# vi .env.production

S3_ENABLED=true
S3_BUCKET=【バケツ名】
AWS_ACCESS_KEY_ID=【API Key】
AWS_SECRET_ACCESS_KEY=【Secret API Key】
S3_REGION=us-west-1
S3_PROTOCOL=https
S3_HOSTNAME=【仮想鯖名】
S3_ENDPOINT=https://s3.us-west-1.wasabisys.com/

16.mastodonとバケツを同期する。差分だけの同期になる。
　# aws s3 sync public/system/ s3://【バケツ名】/ --endpoint-url=https://s3.us-west-1.wasabisys.com

17.mastodonを再起動する。
　# systemctl restart mastodon*

18.SSL証明書を更新する。
  ここではmastodonのSSL証明書に、メディアサーバのアドレスを追加する。
  # certbot certonly --webroot -w /home/mastodon/live/public -d 【mastodonドメイン名】 -d 【サブドメイン名】
  404エラーがでなければOK。

19.SSL証明書読み直しのためにnginxをもう一回再起動する。
　# sudo nginx -s reload

20.キャッシュが有効かを確認する。
　# curl -I https://【仮想鯖名】/【バケツ名】/media_attachments/files/001/871/825/original/f35282636242f8c7.jpg
HTTP/2 200
以下～

21.public/system以下のフォルダを削除する。（ローカル画像キャッシュ。もう不要のため）


-----------------------
＜エディタ：vimの導入＞
さくらのスクリプトを使用した場合は既に導入済みである。
  コマンド：vi

現在入っている Vim エディタを確認します。
$ yum list installed | grep vim

vimをインストールするのに必要なパッケージをインストールします。
$ yum install mercurial
$ yum install ncurses-devel
$ yum install make
$ yum install gcc

ソースビルドでのインストールを行います。
$ su
パスワード：（ root のパスワードを入力）
$ cd /usr/local/src
$ hg clone https://bitbucket.org/vim-mirror/vim vim

vimのインストール
$ cd vim
$ sudo ./configure --with-features=huge --enable-multibyte --disable-selinux
$ sudo make
$ sudo make install



---------------------------------
＜phpの導入＞
php+nginxをセットで使う。（前提：nginxはインストール済）

参考：
https://qiita.com/noraworld/items/fd491a77af9d4e1ccffa

1.phpをインストールする
# yum -y install php
# php --version

2.PHP-FPMをインストールする
# yum -y install php-fpm

3.PHP-FPMの設定変更をする
# vi /etc/php-fpm.d/www.conf
user = nginx
group = nginx

4.サービスを再起動する
# systemctl restart php-fpm
# systemctl status php-fpm

5.nginxの設定を変更する
  webサイトでphpを利用できるような設定と仮定する

location / {
    root   /[ホームディレクトリ];
    index  index.html index.htm index.php;
}

location ~ \.php$ {
    root   /[ホームディレクトリ];
    fastcgi_pass   127.0.0.1:9000;
    fastcgi_index  index.php;
    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
    include        fastcgi_params;
}

6.サービスを再起動する


# nginx -s reload

# systemctl restart nginx

7.webページのディレクトリにテストphpファイルを作成する
<?php
   phpinfo();
?>

phpのページが表示されればOK。


---------------------------------
＜Zabbixの導入＞
ログの監視や障害通知をおこなうツール。
（前提：nginx、php、postgresqlはインストール済。
  postgresユーザのパスワードは設定済）

補足：
  今回"も"qiitaの記事を参考にさせていただきましたが、
  うちの環境だとエラーがでたり、環境に合わない設定がありましたので
  一部手順を変えてます。（いつも変えてるけどちょっと変更点多いです）

参考：
https://qiita.com/atanaka7/items/920dd3edcaefe2b7e1fa
https://qiita.com/ksworks/items/911561ef22687a13a70c
https://qiita.com/mogetarou/items/9af19155c19f3e33c3c1
https://qiita.com/yakumo/items/30706f89cbc0a0b663ca


1.まずOSをアップデートする
# yum update
# reboot

2.firewallで使用ポートの穴をあける
# firewall-cmd --list-all

# firewall-cmd --add-port=10050/tcp --zone=public --permanent  ※agent用
# firewall-cmd --add-port=10051/tcp --zone=public --permanent  ※server用
# firewall-cmd --add-service=http --zone=public --permanent    ※server用

リロードする
# firewall-cmd --reload
# firewall-cmd --list-all

3.SELinuxが有効の場合、以下3つをONにする
# setsebool -P httpd_can_network_connect_db on
# setsebool -P httpd_can_connect_zabbix on
# setsebool -P zabbix_can_network on

4.Zabbixのリポジトリを登録してインストールする
本家：https://www.zabbix.com/jp/  製品ページから

# yum install [リポジトリパス]
# yum install zabbix-server-pgsql zabbix-web-pgsql zabbix-agent

5.postgresにログインする
# su - postgres

6.zabbix用のユーザを作成する
$ createuser zabbix -P -S -R -D
  zabbix用のパスワード、確認用、postgresのパスワードの順に聞いてくる。

7.DBを作成する
$ createdb -O zabbix -E UTF8 zabbix
  postgresのパスワードを聞いてくる。

※一応このテキストのbuildではmd5認証になってるのでそのままで。

8.rootに戻ってDBの初期化をおこなう
$ exit
# zcat /usr/share/doc/zabbix-server-pgsql-3.0.24/create.sql.gz | psql -U zabbix zabbix -W
  zabbixのパスワードを聞いてくる。

9.Zabbixの設定ファイルの設定変更
# vi /etc/zabbix/zabbix_server.conf

DBHost=localhost
DBPassword=[zabbixのパスワード]
DBPort=5432

9.デーモンの起動
# systemctl start zabbix-server
# systemctl start zabbix-agent
# systemctl enable zabbix-server
# systemctl enable zabbix-agent

  ※うちはapacheは使うつもりないので httpdサービス はstartさせない


10.zabbix-webの設定
/var/www をzabbixフォルダとしてアクセスできるように設定する

# cd /etc/zabbix
# ls -ld web
# chown nginx.nginx web
# cd /var/www
# sudo ln -s /usr/share/zabbix .

11.nginxの設定変更
10項で設定した仮想zabbixフォルダに対してnginxからアクセスできるようにする。
ならびにphpが使えるようにする。のとphpでzabbixを実行するのに大きめのバッファ
を設定する。
  補足：
    SSL設定も有効。なので既設定から流用するやり方のがラクかも。
    なおLet's Encryptを使ってる場合は証明書にサブドメインを追加すること。
    以下は非SSL設定例となっている。

# vi /etc/nginx/conf.d/https.conf

server {
    server_name [zabbixサーバドメイン名];

    root        /var/www/zabbix;
    index       index.html index.php;
    access_log  /var/log/nginx/access_zabbix.log main;
    error_log   /var/log/nginx/error_zabbix.log error;

    location ~ \.php {
		root /var/www/zabbix;
        fastcgi_pass    127.0.0.1:9000;
        fastcgi_index   index.php;
        fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;

        fastcgi_intercept_errors        on;
        fastcgi_ignore_client_abort     off;
        fastcgi_connect_timeout         60;
        fastcgi_send_timeout            180;
        fastcgi_read_timeout            180;
        fastcgi_buffer_size             128k;
        fastcgi_buffers                 4       256k;
        fastcgi_busy_buffers_size       256k;
        fastcgi_temp_file_write_size    256k;
    }
}

12.nginxを再起動する
# nginx -s reload

13.php-fpmの設定変更
# vi /etc/php.ini

max_execution_time = 300
max_input_time = 300
post_max_size = 32M
date.timezone = Asia/Tokyo

14.php-fpmをnginx権限で動作するようにする
# vi /etc/php-fpm.d/www.conf

listen.owner = nginx
listen.group = nginx
user = nginx
group = nginx

15.phpのセッションフォルダの権限を変更する
# cd /var/lib/php
# ls -ld session
# chown nginx.nginx session

16.php-fpmを自動起動するようにしておく
# systemctl start php-fpm
# systemctl enable php-fpm

17.ブラウザからzabbixのページにアクセスする。

1)[Next Step]→[Next Step]
2)Configure DB connectionで以下設定
  Database port=5432
  Password=zabbixのパスワード
3)[Next Step]

18.ログインする
  ユーザ名  ：Admin
  パスワード：zabbix

19.adminユーザのパスワードを変更する（※必ず実施すること※）
  admin→user→admin
  ここで日本語UIにも変更できる

  guestは使わなければ消しておいたほうがいいかも


＊監視設定＊

Mastodonインスタンスを監視するための、Zabbixテンプレートを利用する。
https://github.com/ken-washikita/zbx-templates-mstdn

このテンプレートではRedis/Sidekiqを監視できる。

1.redis-latency.shを以下に書き換える
--------------------
WORKFILE=/var/tmp/redis-latency
SAVEFILE=/etc/zabbix/redis/redis-latency
redis-cli --latency > $WORKFILE
cat $WORKFILE | cut -d ' ' -f 2 > $SAVEFILE
--------------------

2.フォルダを作成し、redis-latency.shを置く
# mkdir -p /etc/zabbix/redis

ファイルを置いたら権限を変更する
# cd /etc/zabbix/redis
# chmod +x redis-latency.sh

3.redis-cronを/etc/cron.dに置く
  cronが動作すると、/etc/zabbix/redisに2つのファイルが生成、更新され始める
  redis-info、redis-latency

4./etc/zabbix/zabbix_agentd.dディレクトリに、
  userparameter_redis.conf、userparameter_sidekiq.confを置く

5.zabbixサーバでテンプレートをインポートする。
  設定→テンプレート→インポート
    Template_App_Redis.xml
    Template_App_Sidekiq_Status.xml
    Template_AppSidekiq_Process.xml

6.監視対象を設定する
  設定→ホスト→Zabbix server→テンプレート→選択
    Template App Redis
    Template App Sidekiq Status
    Template App Sidekiq Process
  選択→追加→更新

  これでRedisとsidekiqの各種パラメータが監視できるようになる。
  必要な項目はフィルタできる。


