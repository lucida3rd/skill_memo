-----------------------
mastodon 運用メモ

Lucida（lucida3rd@mstdn.lucida-memo.info）
-----------------------
＜概要＞
mastodon運用時によく使うコマンドや技をまとめます。

よく使う
　◆よく見るフォルダ・よく使うコマンド

バージョンアップ操作
　◆mastodonバージョンアップ手順
　◆Node.jsのグローバル更新
　◆postgreのアップデート手順
　◆rubyアップデート手順
　◆yarnアップデート手順
　◆SSL証明書の更新

運用テクニック
　◆サーバへの接続
　◆ファイアーウォールの操作
　◆nginxがnginx: [error] open()で起動できない場合の対処
　◆削除されたリモートアカウントを自分のdbから削除する

インスタンスの再建・閉鎖
　◆mastodonインスタンス爆破→再建
　◆mastodonインスタンスの閉じ方（提案）

仕様メモ
　◆mastodonの連合TL仕様（個人見解
　◆用語



---------------------------------
＜注意事項＞
---------------------------------
・斜め読みしないで、各メモの効果、手順をよく確認してください。
  よくわかんないうちは使用しないでください。
・各メモには元ソースのリンクを貼り付けてますので、
  よくわかんないときはそちらも合わせて確認してください。
・このメモを使用したことによる不具合、損害について当方は責任を持ちません。
  全て自己責任でお願いします。
・当メモの質問は受け付けません。自己対応でお願いします。



---------------------------------
＜よく見るフォルダ・よく使うコマンド＞

◆nginx関係
コンフィグ
# vim /etc/nginx/conf.d/https.conf

再起動
# nginx -s reload


◆mastodonサービス関係
mastodonコンフィグ
# vim /home/mastodon/live/.env.production

mastodonのホーム
# cd /home/mastodon/live

サービス起動
# systemctl start mastodon*
サービス停止
# systemctl stop mastodon*
サービス再起動
# systemctl restart mastodon*
サービス状態の確認
# systemctl status mastodon*


◆rails・s3バケツ関係
※全てmastodon権限、mastodon/live配下で実行すること。
またv2.5.0から一部rakeコマンドが、bin/tootctlに移行した。

amazon s3/wasabi バケットの手動同期
$ aws s3 sync public/system/ s3://[バケット名]/ --endpoint-url=https://s3.wasabisys.com

古いキャッシュ（とそれのトゥート）の削除
$ RAILS_ENV=production bin/tootctl media remove
日付を指定する場合
$ RAILS_ENV=production bin/tootctl media remove --days=1

管理者化
$ RAILS_ENV=production bin/tootctl accounts modify <ユーザID> --role admin
モデレータ化
$ RAILS_ENV=production bin/tootctl accounts modify <ユーザID> --role moderator
権限の剥奪（一般ユーザ化）
$ RAILS_ENV=production bin/tootctl accounts modify <ユーザID> --role user


◆ディレクトリ

nginx configファイル
　/etc/nginx/conf.d

postfix設定ファイル
　/etc/postfix

Let's Encrupt証明書ファイル
　/etc/letsencrypt/live

cron設定ファイル
　/etc/cron.d

ログ類
　/var/log

スプーラ エラーログ(pythonとかもここ)
　/var/spool/mail


◆CentOS
ディレクトリ配下
# ls -la

現在のパス
# pwd

フォルダ以下の容量
# du -h -d 1 live/public/system/

ディスク容量
# df

3秒ごとにOSで利用しているプロセスの数や状態、またOS全体のシステムリソース状況
# top
　%CPU..CPU使用率
　%MEM..メモリ利用率
　左から7番目の「S」と書かれた列..プロセスの状態
　　R->Running(実行状態もしくは実行可能状態)
　　S->Sleeping(スリープ状態。ネットワークを介したデータ送受信の際もこのステータス)
　　D->Uninterruptible sleep(IO待ち)
　※プロセス状態がDの状態が続いてるプロセスがあればIO待ちによってパフォーマンス遅延が発生している可能性がある

メモリに特化して詳細を表示
# free
　Mem行のfree列の値は 何の用途にも使っていない物理メモリ量

環境変数の確認
# env

環境変数の追加
# export XXX=aaa

環境変数の削除
# unset XXX
  export XXX=""（空欄）では消えない







◆sendmailのテスト
$ sendmail foo@foo.com  # 送りたいメールアドレスを指定します
from:bar@bar.com        # 差出人(From)ヘッダを指定します
to:foo@foo.com          # 宛先(To)ヘッダを指定します
subject:テスト送信      # 件名(Subject)ヘッダを指定します
テスト送信してみました。# 内容(Body)を記入します
.                       # Bodyの入力が終わったら「.」を入力します


-----------------------
＜mastodonバージョンアップ手順＞
参考：https://knowledge.sakura.ad.jp/8683/

1.mastodon権限にログインする。
# su - mastodon
$ cd live

2.gitから最新のリポジトリを引っ張り、タグを表示する。
$ git fetch --tags

3.ローカルを退避して、ブランチを切り替えたあと、退避を戻す。
提供されている最新バージョンがv1.6.1として、
v1.6.0からv1.6.1へのバージョンアップを行う仮定で手順を記載。
$ git status           //ローカルリポジトリの内容を確認する
$ git stash save       //変更を一時退避する
$ git checkout v1.6.1  //ブランチをv1.6.1に切り替える
$ git stash pop        //退避を戻して、退避を消す
$ git branch           //ブランチの一覧を表示する

  以下のように表示されればbranchの移動に成功している。
$ git branch
* (detached from v1.6.1)
  master

4.Mastodonのバージョンアップに必要なコマンドを入力していく。
コマンドはmastodonのRelease Noteに書いてある。
DockerとNon-Docker、環境によって手順が異なることに留意する。
（うちはどうやらNon-Dockerらしい）

一般的なコマンド：
$ gem install bundler
$ bundle install --deployment --without development test
$ yarn install
$ RAILS_ENV=production bundle exec rails db:migrate
$ RAILS_ENV=production bundle exec rails assets:precompile


5.Mastodonをリスタートし、バージョンアップを完了させる。
$ exit
# systemctl restart mastodon*
# systemctl status mastodon*

mastodon-web.service
mastodon-streaming.service
mastodon-sidekiq.service
３つのサービスがActiveであることを確認する。
また、ここまでの画面でWARNNINGが出てないことも確認する。


-----------------------
＜Node.jsのグローバル更新＞

https://qiita.com/Yorinton/items/00ad34f3f902ed41c12f

リリース
https://nodejs.org/ja/

nコマンドを使ったアップデート。
この方法だとnvmなどで切り替えできなくてグローバル的にアップデートされる。
mastodonではこの方法でならアップデートが楽になりそう。

1.バージョン確認
# node -v

2. nをインストールする
# npm install -g n

3. Node.jsをアップデートする
# n stable     安定版
# n latest     最新版

sudoの設定をすれば効くらしい。
この場合、グローバルアップデートにはならない？（わからん）


-----------------------
＜postgreのアップデート手順＞

※記載中



http://beeete2.hatenablog.jp/entry/2017/02/18/172304
https://pgsql-jp.github.io/jpug-doc/9.6.5/postgresql-9.6.5-A4.pdf

★はメジャーアップデートの際の手順

1.nginxとmastodonを止めてバックアップする。
# systemctl stop mastodon*
# service nginx stop

postgres権限で作業する。
# su - postgres
$ mkdir work
$ pg_dumpall --clean --username=postgres --no-owner > work/backup_pg96_dumpall.dump
パスワード5回くらい聞いてくる（DB数分？）

2.最新のpostgresqlをダウンロードする。
https://www.postgresql.org/download/
でリポジトリを確認。

root権限で作業するらしい。
$ exit
# yum install [リポジトリのアドレス]
# yum list | grep postgresql96
レポジトリがインストールされたか確認する

3.インストールする。
# yum install postgresql96-server

4.psqlとpg_dumpが9.6を参照しているか確認する
# alternatives --display pgsql-psql
# alternatives --display pgsql-pg_dump

5.configの初期設定をする。★
# PGSETUP_INITDB_OPTIONS="--encoding=UTF8 --no-locale" /usr/pgsql-9.6/bin/postgresql96-setup initdb

6.postgreを再起動する。
# systemctl enable postgresql-9.6
# systemctl start postgresql-9.6

7.リストアする。
# su - postgres
$ psql -d postgres -f work/backup_pg96_dumpall.dump 2>&1 | tee work/restored.log

8.自動起動の設定を行う。★
$ systemctl disable postgresql-9.4
$ systemctl enable postgresql-9.6

正しく設定されているか確認する
$ systemctl list-unit-files --type=service | grep postgresql

PostgreSQL 9.4のレポジトリを無効にする
$ sed -i -e 's|enabled=1|enabled=0|g' /etc/yum.repos.d/pgdg-94-centos.repo

9.nginxを起動する。
$ exit
# service nginx start
# systemctl start mastodon*
# systemctl status nginx*
# systemctl status mastodon*
サービスの状態を確認する。


-----------------------
＜rubyアップデート手順＞

まずruby-buildが入っていることが前提になります。
入っていないと正確なバージョンが表示できなかったり、バージョンリストが取得できないようです。
（さくらのスクリプトでセットアップされた場合は入ってます）

参考：
https://qiita.com/Kaisyou/items/b51c9854bd040046d599

1.mastodon権限に切り替える。
# su - mastodon

2.ruby-buildのインストールフォルダに移動する。
$ cd /home/mastodon/.rbenv/plugins/ruby-build
※not fontだったらruby-buildをinstallする(通常はinstallされていると思う)

3.現在のバージョンを確認する。
$ rbenv versions

4.gitからバージョンリストを取得する。
$ git pull

5.インストールする。
$ rbenv install -v [インストールしたいバージョン名]
※2.5.3の場合
  $ rbenv install -v 2.5.3

6.バージョンを上げる。
$ rbenv global [5項のバージョン名]

7.pathを通す。（bash向け？）
$ echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bash_profile
$ echo 'eval "$(rbenv init -)"' >> ~/.bash_profile
$ exec $SHELL -l

8.現在のバージョンを確認する。
$ rbenv versions

* [5項のバージョン] に切り替わっていればOK。


-----------------------
＜yarnアップデート手順＞

mastodonアップデート中、bundle exec実行中にyarnのアップデートを促されたら（WARNNINGとして出力）
yarnのアップデートを行うこと。
コマンドはWARNNINGに記載されているが、念のため以下にも記載する。

# su - mastodon
$ cd live
$ curl --compressed -o- -L https://yarnpkg.com/install.sh | bash


-----------------------
＜サーバへの接続＞

◆ターミナルソフト→鯖へ接続
TeraTermからでもいいけど、dosのプロンプトからのがやりやすいかも。
> ssh root@[ホストIPアドレス] -i [秘密鍵(拡張子がない)のパス]
  例：ssh root@xxx.xxx.xxx.xxx -i C:\Users\User1\.ssh\id_kagi

サーバ管理者のパスワード


◆FTP接続（WinSCAP）
WinScapに秘密鍵ファイルを認識させる
「設定」－「SSH」－「認証」
秘密鍵
<ユーザディレクトリ>\.ssh\id_rsa.ppk

ユーザ：root
ホスト：ホストアドレス
パスフレーズ：管理者のパスワード


-----------------------
＜ファイアーウォールの操作＞

ファイアーウォールが動作しているかを見る。
# firewall-cmd --state

設定一覧を見る。
# firewall-cmd --list-all

ポートを開ける。
# firewall-cmd --add-port=***/tcp --zone=public --permanent

ポートを閉じる。
# firewall-cmd --remove-port=***/tcp --zone=public --permanent

ファイアーウォール設定をリロードする
# firewall-cmd --reload

ログの制御
# firewall-cmd --set-log-denied=[設定値]
設定値
all=全出力(拒否含む)
off=出力しない
ログは /var/log/message に出力される。


-----------------------
＜nginxがnginx: [error] open()で起動できない場合の対処＞

1.nginxサービスを止める。
# service nginx stop

2.nginx関係のプロセスを見つける。
# ps aux | grep nginx

3.でてきたプロセスをすべてころす。
# systemctl kill -s 9 [サービス名]
サービス名..例えば nginx.service

4.nginxを起動する。
# service nginx start

5.サービスの状態を確認する。
# systemctl status nginx*

activeになっていればOK。


-----------------------
＜削除されたリモートアカウントを自分のdbから削除する＞
垢削除されたり、インスタンスを閉じられて停止されたアカウントを自分のdbから削除する。

1.mastodonでログインする。
  # su - mastodon
  # cd /home/mastodon/live

2.リモートインスタンスから自分のアカウントの存在を消す。
  $ RAILS_ENV=production bundle exec rake mastodon:maintenance:purge_removed_accounts -f
  後ろの-fはオプションで、削除問い合わせをなくす。


-----------------------
＜SSL証明書の編集：サブドメインの追加＞
スタートアップスクリプトではLet's EmcryptのSSL証明書も作成されるが、
mastodonのドメインの登録のみで、サブドメインなどでアクセスすると証明書エラーとなる。
これを解決するため、証明書の更新（サブドメインの追加）をおこなう。

参考：
https://qiita.com/chamaharun/items/566c78bb8a13b4c2bc16

https://letsencrypt.jp/usage/#ExecClientSoftware


1.certbotをインストールする
cd /root
yum -y install certbot --enablerepo=epel
yum install git
git clone https://github.com/certbot/certbot.git
cd certbot

2.上記手順だとurllib3が書き換わるのでインストールしなおす（なんとかなんないのかなこれ..）
# pip install --upgrade --force-reinstall 'requests==2.6.0' urllib3


証明書の発行：サブドメインなしの場合
# certbot certonly --webroot -w [ドメインのカレントフォルダ] -d [ドメイン名]

証明書の発行：サブドメインありの場合
-dオプションで関連付けられる。
# certbot certonly --webroot -w [ドメインのカレントフォルダ] -d [ドメイン名] -d[サブドメイン1] -d [サブドメイン1]

証明書の発行：別カレントのサブドメイン
-wオプションで関連付けられる。
# certbot certonly --webroot -w [ドメインのカレントフォルダ] -d [ドメイン名] -w [サブドメインのカレントフォルダ] -d [サブドメイン1]


4.nginxを再起動する。
# nginx -s reload


証明書の場所
/etc/letsencrypt/live/









-----------------------
＜mastodonインスタンス爆破→再建＞
mastodonインスタンスを一回潰して、同じ手順で再開するときの動作要綱について。

結論として、同じドメイン、同じアカウントでの復活は可能。
ただし、接続している他のインスタンスのキューが蓄積したり、エラーがでるので、影響のあることを念頭に入れること。
こちらのsidekiqには待機キューが大量に蓄積するのが見えるはず。
おそらくはインスタンス間でなんらかの同期処理をやってると思われる。

sidekiqのログとか理解してないので詳しくは不明だが。
・同じドメイン名、アカウント名でインスタンス立て直すと、sidekiqの（連合TLのトゥート）が大量に蓄積する。
・蓄積したキュー消しても再度蓄積していく。
・キューが蓄積してる間は、トゥート、フォローなどはできない。
・連合の接続はそのまま残ってた。



-----------------------
＜mastodonインスタンスの閉じ方（提案）＞
参考記事これ：
https://qiita.com/kumasun/items/7aa50a7b1b6d90e322fc

1.1～3でnginxでHTTPステータスコード：410を吐かせる。
  sidekiqのアクセスを止めさせる効果があるとか。
　# vim /etc/nginx/conf.d/https.conf

location / {
    root /home/mastodon/live/public;
    return 410;
}
※他と被らないよう注意すること。

2.nginxを再起動する。
　# sudo nginx -s reload

3.mastodonでログインする。
  # su - mastodon
  # cd /home/mastodon/live

4.Railsコンソールを起動する。
  $ bundle exec rails console -e production

5.ローカルユーザを全てサスペンド（停止）する。
  > Account.where(domain: nil).partitioned.find_each do |account|
  >   printf "%s suspending...\n", account.username
  >   SuspendAccountService.new.call(account)
  >   account.destroy()
  > end; 0

Scoped order is ignored, it's forced to be batch order.
がでればOK。

6.exitでコンソールを抜ける。
  sidekiqのキューが溜まると思うので7への操作は間を置くこと。
  ※確認ができない

以上で鯖を閉じられると思う。


-----------------------
＜mastodonの連合TL仕様（個人見解＞
自分のインスタンス上からの見た目で、連合TLに表示されるトゥートは以下の通り。
・自インスタンスのユーザがおこなった公開トゥート
・自インスタンスのユーザがブーストした公開トゥート（リモートユーザ含める）

というところから、能動的に連合TLを活性させるには。
・自インスタンスのユーザのトゥートを促進させる。
・自インスタンスのアカウントで、よくブーストするユーザをフォローしておく。
　2番目については自分でアカウントを建てれば簡単にできそう。


-----------------------
＜用語＞
mastodon：ますとどん
ドイツのIT技術者オイゲン・ロチコ氏 (Eugen Rochko)が開発した、SNSサービスソフトウェア。
フリーソフトウェアであり、Linuxのクラウドサーバがあれば誰でも使用できる。
ストリームタイムライン機能を持ち、自分や他のユーザが投稿内容がリアルタイムに流れる。
twitterと違うのは、企業個人問わず誰でもmastodonサーバ（インスタンス）を建てられる点で、複数のインスタンスが存在する。
そのため、1つのインスタンスに問題があっても、他のインスタンスでmastodonの利用を続けることができる。
（アカウントはインスタンスごとに登録する必要がある）
有志でmastodon APIも提供されており、mastodonで動くアプリケーションや、mastodonのクライアントも開発できる。

mastodonが動く仕組み（lucida個人見解）
あんまよく理解してないです。
sidekiqがユーザやブラウザからのuriを実行し、Redisがsqlを中継、データの管理をpostgreSQLでおこなう。
dockerを使うかは任意で、使うとコマンドの記述を短縮化できるが、実際はリソースを食うらしい。

postgreSQL
オープンソースのデータベースのひとつ。
SQLで問い合わせできる。

sidekiq
Linuxで動作する非同期実行gem（カーネル）。
バックエンドにはRailsが必要。

Redis：Remote dictionary server
メモリ上にKey-Valueストア(KVS)を構築することができるソフトウェアの一つ。
KVSは任意の保存したいデータ(値：value)に対し、対応する一意の標識(キー：key)を設定し、
これらをペアで保存するデータベースの一種で。Redisはコンピュータのメインメモリ上にKVSを構築し、
外部のプログラムからデータの保存と読み出しができる。

Rails：Ruby on Rails：
スクリプト言語のRubyにより構築された、Webアプリケーション開発のためのフレームワーク。
MVC（Model-View-Controller）アーキテクチャをサポートしており、データベースに関する処理を担うモデル、
データの表示を行うビュー、それらを制御するコントローラの雛形を自動生成する機能を持っている。
データの作成・読み込み・更新・削除(CRUD)のみを行うような単純なWebアプリケーションであれば、
データテーブルの作成と雛形の自動生成を行うのみでほとんどの部分が開発できてしまう。
Webアプリケーションの多くはCRUD処理を中核としているので、Ruby on Railsを使うことによって多くのコード
の作成を自動化することができ、開発期間を短縮できる。

docker
コンテナ型の仮想化環境を提供するオープンソースソフトウェア。
アプリケーションを少ない資源で効率よく実行できる。




