-----------------------
mastodonメモ
-----------------------

-----------------------
＜よく見るフォルダ＞
nginxのコンフィグ
vim /etc/nginx/conf.d/https.conf
  nginx再起動 # sudo nginx -s reload

CentOSエラーログ
cd /var/spool/mail

ホームページのホーム
cd /home/mastodon/live/public

mastodonのホーム
cd /home/mastodon/live

フォルダ以下の容量
du -h -d 1 live/public/system/

7日以前の画像キャッシュ（とそれのトゥート）の削除
mastodon/live配下で
RAILS_ENV=production bundle exec rake mastodon:media:remove_remote

アバターの取り直し（高負荷）
mastodon/live配下で
RAILS_ENV=production bundle exec rake mastodon:media:redownload_avatars

管理者化
RAILS_ENV=production bundle exec rails mastodon:make_admin USERNAME=<ユーザID>
権限の剥奪（一般ユーザ化）
RAILS_ENV=production bundle exec rails mastodon:revoke_staff USERNAME=<ユーザID>

mastodonサービスの制御
起動
systemctl start mastodon*
停止
systemctl stop mastodon*
再起動
systemctl restart mastodon*

amazon s3/wasabi バケットの手動同期
aws s3 sync public/system/ s3://[バケット名]/ --endpoint-url=https://s3.wasabisys.com


localhost:4000


-----------------------
＜centosコマンド＞
df
ディスク容量

top
3秒ごとにOSで利用しているプロセスの数や状態、またOS全体のシステムリソース状況
　%CPU..CPU使用率
　%MEM..メモリ利用率
　左から7番目の「S」と書かれた列..プロセスの状態
　　R->Running(実行状態もしくは実行可能状態)
　　S->Sleeping(スリープ状態。ネットワークを介したデータ送受信の際もこのステータス)
　　D->Uninterruptible sleep(IO待ち)
　※プロセス状態がDの状態が続いてるプロセスがあればIO待ちによってパフォーマンス遅延が発生している可能性がある

vmstat
メモリやCPU使用率
　cpu項の「id」列ではアイドル(空いている)割合をパーセントで表示
　「wa」列ではストレージのIO完了待ちを示す。

ps
現在利用しているプロセス・ストッドごとのCPUやメモリ使用率が分かる。

free
メモリに特化して詳細を表示
　Mem行のfree列の値は 何の用途にも使っていない物理メモリ量

cat /proc/meminfo
メモリの詳細がわかる。

dmidecode --type memory
dmidecode --type memory | grep Size
実装されている物理メモリの詳細。


-----------------------
＜mastodonバージョンアップ手順＞
参考：https://knowledge.sakura.ad.jp/8683/

mastodon権限にログインする。
su - mastodon
cd live


リリースされてるブランチの確認。
git fetch --tags


インストールされているバージョンがv1.6.0、
提供されている最新バージョンがv1.6.1として、
v1.6.0からv1.6.1へのバージョンアップを行う仮定で手順を記載。
v1.6.1（バージョンアップする）のbranchに移動。

git checkout v1.6.1
git stash pop
git branch

以下のように表示されればbranchの移動に成功している。
$ git branch
* (detached from v1.6.1)
  master


Mastodonのバージョンアップに必要なコマンドを入力していく。
コマンドはRelease Noteに書いてある。
DockerとNon-Docker、環境によって手順が異なることに留意する。
（うちはどうやらNon-Dockerらしい）

一般的なコマンド：
gem install bundler 
bundle install --deployment --without development test 
yarn install 
RAILS_ENV=production bundle exec rails db:migrate
RAILS_ENV=production bundle exec rake mastodon:maintenance:add_static_avatars
RAILS_ENV=production bundle exec rails assets:precompile


Mastodonをリスタートし、バージョンアップを完了させる。
exit
systemctl restart mastodon*


-----------------------
＜mastodonプリコンパイル＞
su - mastodon
bundle exec rails assets:precompile RAILS_ENV=production
exit
systemctl restart mastodon*


-----------------------
＜mastodonの連合TL仕様（個人見解＞
自分のインスタンス上からの見た目で、連合TLに表示されるトゥートは以下の通り。
・自インスタンスのユーザがおこなった公開トゥート
・自インスタンスのユーザがブーストした公開トゥート（リモートユーザ含める）

というところから、能動的に連合TLを活性させるには。
・自インスタンスのユーザのトゥートを促進させる。
・自インスタンスのアカウントで、よくブーストするユーザをフォローしておく。
　2番目については自分でアカウントを建てれば簡単にできそう。


-----------------------
＜mastodonの自インスタンスを建てる＞

さくらインターネットのさくらのクラウドを利用する方法。
クラウドサーバを建てるときにmastodonを自動セットアップするスクリプトが選択できるので、比較的簡単に導入できる。
Non-Dockerでnginxも導入される。ので、上手く設定すればwebページも併設できる。

参考
https://knowledge.sakura.ad.jp/8591/


必要なもの
・クレジットカード
・スマートフォン（ワンタイムアプリを動かす。SMSではダメ。）
・Google Authenticator


手順：
1.さくらインターネットの会員登録をする

2.さくらのドメインでmastodonで使うドメインを取得する
　→この時に支払いのクレジットカードを登録する

3.さくらのクラウドアカウントを作成する（会員とは別）
　→ワンタイムパスワードの設定が必須
　→作るだけならこの時点では課金対象外

4.さくらのクラウドでDNSの設定をする
　→左上のゾーンは「石狩」を選択する（こっちのが安い）
　→2で取得したドメインを登録する
　→設定後に出るDNSゾーン情報（２個）をメモしておくこと

5.ドメインコントローラー（さくら会員の契約ドメインページ）でゾーン設定をおこなう
　ドメインメニュー→Whois情報で、ネームサーバ1,2に4で得たDNSゾーン情報を設定する
　→設定が反映されるのに2時間くらいかかる

6.公開鍵を作成する
　1)DOSプロンプトを開く
　2)ssh-keygen -t rsa
　3)鍵の出力パス、ファイルが設定できる。変更しないならそのままenter。
　　デフォルトの出力先は、
　　<ユーザディレクトリ>\.ssh
    ※複数鍵を作る場合はここでファイル分けしておく
　4)パスフレーズを設定しenter。（2回）
　　以下のように出力されれば成功。
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
　　※ファイルは消したほうがいいって話だけど、TeraTermなどからログインするのに必要なので。
    参考情報：https://qiita.com/0084ken/items/2e4e9ae44ec5e01328f1

7.公開鍵を設定する
　→さくらのクラウドに戻って、リソースマネージャー→公開鍵で、識別キーを追加する。
　　1)追加を選択
　　2)公開鍵に /root/.ssh/id_rsa.pubの内容 ssh-rsaで始まるキーを全てコピペする。
　→さくらのクラウドに戻って、リソースマネージャー→公開鍵で、公開鍵を追加する。
　　1)生成を選択
　　2)パスフレーズは6で設定したパスフレーズを入力。
　→秘密鍵（証明書）はダウンロードして、わかりやすいフォルダに保存しておく。

8.APIキーを作成する
　7の設定が上手くいくとAPIキーが作成できるので、作成する。
　ホームに戻り、APIキーを選択。追加から。
　名前はわかりやすいものをつけておくほうがよい。他はいじらなくていい。
　アクセストークンとトークンシークレットは控えておく。

9.ディスクを作成する
　ディスク容量を選択。
　アーカイブ：CentOS 7.5を選択
　名前は分かりやすいものをつける。
　あとでディスク修正するので他は適当でも。

10.サーバを作成する
　ディスクはマイディスクで9で作ったディスクを選択
　管理ユーザのパスワード：rootのパスワード
　SSD：必要に応じて。
　メモリ：必要に応じて。

　ディスクを修正
　管理ユーザのパスワード：rootのパスワード
　ホスト：ホスト名
　スタートアップスクリプト：mastodonを選択
　APIキー：8で作成したキーを選択する

　すぐに起動をチェックして、作成。
　ステータス上は「完了」と出るが、これはサーバの作成のこと。
　mastodonの作成はかなり時間がかかるので、時間を置くこと。（2時間くらい見ておいたほうが無難）

11.mastodonの設定をする
　Webブラウザで「https://＜ドメイン＞/」にアクセスする。
　mastodonのログインページがでたらOK。
　でなかったらまだmastodon作成中なので、時間を置いて待つ。
　※ここで慌てないこと！
　2時間置いても出なかったら設定に問題あるかも？

　1)まずは普通にmastodonのアカウントを作成する。
　2)DOSやクライアントからサーバにログインする。
　　dosの場合：ssh root@<ドメインアドレス>
    公開鍵を指定する場合は-iオプションを付ける
    ssh root@<ドメインアドレス> -i <ファイルの絶対パス>
    ※常に鍵を指定しておいたほうが安全かも
  3)rootパスワードを入力。
　4)以下で、1)で作成したアカウントを管理者に昇格させる。
su - mastodon
cd live
RAILS_ENV=production bundle exec rails mastodon:make_admin USERNAME=<1)のユーザID>

以下のようなメッセージがでれば成功。
Congrats! <ユーザID> is now an admin. \o/
Navigate to https://<ドメインアドレス>/admin/settings to get started

　4) 1)のユーザでmastodonに再ログインすると、管理者メニューが使えるようになる。


-----------------------
＜vimの導入＞
現在入っている Vim エディタを確認します。
$ yum list installed | grep vim

vimをインストールするのに必要なパッケージをインストールします。
$ yum install mercurial
$ yum install ncurses-devel
$ yum install make
$ yum install gcc

ソースビルドでのインストールを行います。
$ su
パスワード：（ root のパスワードを入力）
$ cd /usr/local/src
$ hg clone https://bitbucket.org/vim-mirror/vim vim

vimのインストール
$ cd vim
$ sudo ./configure --with-features=huge --enable-multibyte --disable-selinux
$ sudo make
$ sudo make install


-----------------------
＜mastodon外部メディアストレージへの移設→wasabi＞

参考
https://angristan.xyz/moving-mastodon-media-files-to-wasabi-object-storage/

てかここに全部書いてあるので概要をざっと。

mastodon鯖は、連合で認識したユーザがもつメディアを鯖内に保持する仕様になっている。
つまり連合のユーザを認識すればするほどメディアファイルが増えていき、ディスク容量を
圧迫することになる。
極端にローカルな鯖であれば、定期的なディスククリーンアップで対応できるが、認識外で
鯖の接続数が増えるとやがて対応しきれない。ディスク容量を増やすにしても資金的、物理的
にも限界があるだろう。

そこで、メディアファイルだけ外部のオブジェクトストレージを使う方法がある。

mastodonはデフォルトでamazonのs3サービスに対応していて、キーさえ取得できればすぐに
外部メディアストレージ化が始められる。今回はknzk.meでも採用されている「wasabi」へ
移設する方法を示す。手順はs3とほぼ変わらない上、こちらのほうが安い（営業妨害だ）
https://wasabi.com/pricing/

またwasabiは30日間/1TBの無料期間がある。

1.wasabiでユーザ登録する。

2.「strage」画面でバケツ（画像を入れるプロジェクトフォルダのようなもの）を作る。
　名前はわかりやすいもので。
　名前はメモしておく。

3.バケツのポリシーに以下を貼り付けてセーブする。
　バケツ名はエディタで編集してからにする。

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "AddPerm",
      "Effect": "Allow",
      "Principal": {
        "AWS": "*"
      },
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::【バケツ名】/*"
    }
  ]
}

4.IAM→USERから、mastodonがバケツにアクセスするユーザを作成する。
　Programmaticをチェックしておく。
　作成時に表示されるAPI Key、Secret API Keyはメモしておくこと。

5.IAM→POLICYから、4のユーザの専用ポリシーを作る。内容は以下。
　ポリシー名はわかりやすい名前で。
　バケツ名はエディタで編集してからにする。

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "s3:ListBucket",
      "Resource": "arn:aws:s3:::【バケツ名】"
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:PutObject",
        "s3:GetObject",
        "s3:DeleteObject"
      ],
      "Resource": "arn:aws:s3:::【バケツ名】*"
    }
  ]
}

6.IAM→USERで4のユーザのPERMISSIONSで5のポリシーを追加する。

7.サーバのコンソールにログインする。（root権限のままでok）
　mastodonのliveフォルダに移動する。
　# cd /home/mastodon/live

　pipでwasabiへのアップローダaws-cliをインストールする。
　# pip install awscli

　バージョンが表示されればOK。
　# aws --version
　aws-cli/1.15.26 Python/2.7.13 Linux/4.9.0-6-amd64 botocore/1.10.26

8.aws-cliに4で取得したアクセスキーを設定する。
　# aws configure
　AWS Access Key ID [None]: 【API KEY】
　AWS Secret Access Key [None]: 【SECRET API KEY】
　Default region name [None]:（空欄）
　Default output format [None]:（空欄）

9.古いキャッシュを掃除しておく。
　# su - mastodon
　$ cd live
　$ RAILS_ENV=production bundle exec rake mastodon:media:remove_remote
　$ exit

10.mastodonとバケツを同期する。かなり時間がかかります。
　# aws s3 sync public/system/ s3://【バケツ名】/ --endpoint-url=https://s3.wasabisys.com

11.nginxにキャッシュ用のプロクシサーバ（wasabiの仮想サーバ）を設定する。
　# vim /etc/nginx/conf.d/https.conf

　http層の中にまるまるコピー。バケツ名は各自で。

proxy_cache_path /tmp/nginx_mstdn_media levels=1:2 keys_zone=【バケツ名】:100m max_size=1g inactive=24h;

server {
    listen 80;
    listen [::]:80;
    server_name media.mstdn.io;
    return 301 https://media.mstdn.io$request_uri;
    access_log /dev/null;
    error_log /dev/null;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name media.mstdn.io;

    access_log /var/log/nginx/mstdn-media-access.log;
    error_log /var/log/nginx/mstdn-media-error.log;

    location / {
            proxy_cache 【バケツ名】;
            proxy_cache_revalidate on;
            proxy_buffering on;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            proxy_cache_lock on;
            proxy_cache_valid 1d;
            proxy_cache_valid 404 1h;
            proxy_ignore_headers Cache-Control;
            add_header X-Cached $upstream_cache_status;
            proxy_pass https://s3.wasabisys.com/;
    }
}

13.nginxを再起動する。
　# sudo nginx -s reload

　エラーがでなければOK。

12.mastodonのコンフィグにバケツのアクセスキーを設定する。
　# vim .env.production

S3_ENABLED=true
S3_BUCKET=【バケツ名】
AWS_ACCESS_KEY_ID=【API Key】
AWS_SECRET_ACCESS_KEY=【Secret API Key】
S3_REGION=【バケツのRegion】
S3_PROTOCOL=https
S3_HOSTNAME=media.mstdn.io
S3_ENDPOINT=https://s3.wasabisys.com/

13.mastodonとバケツを同期する。差分だけの同期になる。
　# aws s3 sync public/system/ s3://【バケツ名】/ --endpoint-url=https://s3.wasabisys.com

14.mastodonを再起動する。
　# systemctl restart mastodon*

15.キャッシュが有効かを確認する。
　# curl -I https://media.mstdn.io/mstdn-media/media_attachments/files/001/871/825/original/f35282636242f8c7.jpg
HTTP/2 200
以下～

16.public/system以下のフォルダを削除する。（ローカル画像キャッシュ。もう不要のため）



-----------------------
＜ターミナルソフトからのアクセス＞
TeraTermからでもいいけど、dosのプロンプトからのがやりやすいかも。

root@<ホストアドレス>
管理者のパスワード


-----------------------
＜FTPでのアップロード（WinSCAP）＞
WinScapに秘密鍵ファイルを認識させる
「設定」－「SSH」－「認証」
秘密鍵
<ユーザディレクトリ>\.ssh\id_rsa.ppk

ユーザ：root
ホスト：ホストアドレス
パスフレーズ：管理者のパスワード


-----------------------
＜メモリの調整：redis＞

/etc/redis.conf

redis-cli info


http://t-cyrill.hatenablog.jp/entry/2016/12/11/224604


https://github.com/yoshiya0503/my-conf/tree/master/redis


-----------------------
＜mastodonインスタンス爆破→再建＞
mastodonインスタンスを一回潰して、同じ手順で再開するときの動作要綱について。

結論として、同じドメイン、同じアカウントでの復活は可能。
ただし、接続している他のインスタンスのキューが蓄積したり、エラーがでるので、影響のあることを念頭に入れること。
こちらのsidekiqには待機キューが大量に蓄積するのが見えるはず。
おそらくはインスタンス間でなんらかの同期処理をやってると思われる。

sidekiqのログとか理解してないので詳しくは不明だが。
・同じドメイン名、アカウント名でインスタンス立て直すと、sidekiqの（連合TLのトゥート）が大量に蓄積する。
・蓄積したキュー消しても再度蓄積していく。
・キューが蓄積してる間は、トゥート、フォローなどはできない。
・連合の接続はそのまま残ってた。



-----------------------
＜mastodonインスタンスの閉じ方（提案）＞
参考記事これ：
https://qiita.com/kumasun/items/7aa50a7b1b6d90e322fc

1.1～3でnginxでHTTPステータスコード：410を吐かせる。
  sidekiqのアクセスを止めさせる効果があるとか。
　# vim /etc/nginx/conf.d/https.conf

location / {
    root /home/mastodon/live/public;
    return 410;
}
※他と被らないよう注意すること。

2.nginxを再起動する。
　# sudo nginx -s reload

3.mastodonでログインする。
  # su - mastodon
  # cd /home/mastodon/live

4.Railsコンソールを起動する。
  $ bundle exec rails console -e production

5.ローカルユーザを全てサスペンド（停止）する。
  > Account.where(domain: nil).partitioned.find_each do |account|
  >   printf "%s をサスペンドしています...\n", account.username
  >   SuspendAccountService.new.call(account)
  >   account.destroy()
  > end; 0

Scoped order is ignored, it's forced to be batch order.
がでればOK。

6.exitでコンソールを抜ける。
  sidekiqのキューが溜まると思うので7への操作は間を置くこと。
  ※確認ができない

以上で鯖を閉じられると思う。


-----------------------
＜削除されたリモートアカウントを自分のdbから削除する＞
垢削除されたり、インスタンスを閉じられて停止されたアカウントを自分のdbから削除する。

1.mastodonでログインする。
  # su - mastodon
  # cd /home/mastodon/live

2.リモートインスタンスから自分のアカウントの存在を消す。
  $ RAILS_ENV=production bundle exec rake mastodon:maintenance:purge_removed_accounts -f
  後ろの-fはオプションで、削除問い合わせをなくす。


-----------------------
＜用語＞
mastodon：ますとどん
ドイツのIT技術者オイゲン・ロチコ氏 (Eugen Rochko)が開発した、SNSサービスソフトウェア。
フリーソフトウェアであり、Linuxのクラウドサーバがあれば誰でも使用できる。
ストリームタイムライン機能を持ち、自分や他のユーザが投稿内容がリアルタイムに流れる。
twitterと違うのは、企業個人問わず誰でもmastodonサーバ（インスタンス）を建てられる点で、複数のインスタンスが存在する。
そのため、1つのインスタンスに問題があっても、他のインスタンスでmastodonの利用を続けることができる。
（アカウントはインスタンスごとに登録する必要がある）
有志でmastodon APIも提供されており、mastodonで動くアプリケーションや、mastodonのクライアントも開発できる。

mastodonが動く仕組み（lucida個人見解）
あんまよく理解してないです。
sidekiqがユーザやブラウザからのuriを実行し、Redisがsqlを中継、データの管理をpostgreSQLでおこなう。
dockerを使うかは任意で、使うとコマンドの記述を短縮化できるが、実際はリソースを食うらしい。

postgreSQL
オープンソースのデータベースのひとつ。
SQLで問い合わせできる。

sidekiq
Linuxで動作する非同期実行gem（カーネル）。
バックエンドにはRailsが必要。

Redis：Remote dictionary server
メモリ上にKey-Valueストア(KVS)を構築することができるソフトウェアの一つ。
KVSは任意の保存したいデータ(値：value)に対し、対応する一意の標識(キー：key)を設定し、
これらをペアで保存するデータベースの一種で。Redisはコンピュータのメインメモリ上にKVSを構築し、
外部のプログラムからデータの保存と読み出しができる。

Rails：Ruby on Rails：
スクリプト言語のRubyにより構築された、Webアプリケーション開発のためのフレームワーク。
MVC（Model-View-Controller）アーキテクチャをサポートしており、データベースに関する処理を担うモデル、
データの表示を行うビュー、それらを制御するコントローラの雛形を自動生成する機能を持っている。
データの作成・読み込み・更新・削除(CRUD)のみを行うような単純なWebアプリケーションであれば、
データテーブルの作成と雛形の自動生成を行うのみでほとんどの部分が開発できてしまう。
Webアプリケーションの多くはCRUD処理を中核としているので、Ruby on Railsを使うことによって多くのコード
の作成を自動化することができ、開発期間を短縮できる。

docker
コンテナ型の仮想化環境を提供するオープンソースソフトウェア。
アプリケーションを少ない資源で効率よく実行できる。



