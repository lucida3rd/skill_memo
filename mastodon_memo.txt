-----------------------
mastodon 運用メモ
-----------------------

＜よく見るフォルダ＞
nginxのコンフィグ
vim /etc/nginx/conf.d/https.conf
  nginx再起動 # sudo nginx -s reload

mastodonコンフィグ
vim /home/mastodon/live/.env.production

CentOSエラーログ
cd /var/spool/mail

mastodonのホーム
cd /home/mastodon/live

フォルダ以下の容量
du -h -d 1 live/public/system/

7日以前の画像キャッシュ（とそれのトゥート）の削除
mastodon/live配下で
RAILS_ENV=production bundle exec rake mastodon:media:remove_remote

アバターの取り直し（高負荷）
mastodon/live配下で
RAILS_ENV=production bundle exec rake mastodon:media:redownload_avatars

管理者化
RAILS_ENV=production bundle exec rails mastodon:make_admin USERNAME=<ユーザID>
権限の剥奪（一般ユーザ化）
RAILS_ENV=production bundle exec rails mastodon:revoke_staff USERNAME=<ユーザID>

mastodonサービスの制御
起動
systemctl start mastodon*
停止
systemctl stop mastodon*
再起動
systemctl restart mastodon*

amazon s3/wasabi バケットの手動同期
aws s3 sync public/system/ s3://[バケット名]/ --endpoint-url=https://s3.wasabisys.com


localhost:4000



-----------------------
＜centosコマンド＞
df
ディスク容量

top
3秒ごとにOSで利用しているプロセスの数や状態、またOS全体のシステムリソース状況
　%CPU..CPU使用率
　%MEM..メモリ利用率
　左から7番目の「S」と書かれた列..プロセスの状態
　　R->Running(実行状態もしくは実行可能状態)
　　S->Sleeping(スリープ状態。ネットワークを介したデータ送受信の際もこのステータス)
　　D->Uninterruptible sleep(IO待ち)
　※プロセス状態がDの状態が続いてるプロセスがあればIO待ちによってパフォーマンス遅延が発生している可能性がある

vmstat
メモリやCPU使用率
　cpu項の「id」列ではアイドル(空いている)割合をパーセントで表示
　「wa」列ではストレージのIO完了待ちを示す。

ps
現在利用しているプロセス・ストッドごとのCPUやメモリ使用率が分かる。

free
メモリに特化して詳細を表示
　Mem行のfree列の値は 何の用途にも使っていない物理メモリ量

cat /proc/meminfo
メモリの詳細がわかる。

dmidecode --type memory
dmidecode --type memory | grep Size
実装されている物理メモリの詳細。


-----------------------
＜mastodonバージョンアップ手順＞
参考：https://knowledge.sakura.ad.jp/8683/

mastodon権限にログインする。
su - mastodon
cd live


リリースされてるブランチの確認。
git fetch --tags


インストールされているバージョンがv1.6.0、
提供されている最新バージョンがv1.6.1として、
v1.6.0からv1.6.1へのバージョンアップを行う仮定で手順を記載。
v1.6.1（バージョンアップする）のbranchに移動。

git checkout v1.6.1
git stash pop
git branch

以下のように表示されればbranchの移動に成功している。
$ git branch
* (detached from v1.6.1)
  master


Mastodonのバージョンアップに必要なコマンドを入力していく。
コマンドはRelease Noteに書いてある。
DockerとNon-Docker、環境によって手順が異なることに留意する。
（うちはどうやらNon-Dockerらしい）

一般的なコマンド：
gem install bundler 
bundle install --deployment --without development test 
yarn install 
RAILS_ENV=production bundle exec rails db:migrate
RAILS_ENV=production bundle exec rake mastodon:maintenance:add_static_avatars
RAILS_ENV=production bundle exec rails assets:precompile


Mastodonをリスタートし、バージョンアップを完了させる。
exit
systemctl restart mastodon*


-----------------------
＜mastodonプリコンパイル＞
su - mastodon
bundle exec rails assets:precompile RAILS_ENV=production
exit
systemctl restart mastodon*


-----------------------
＜mastodonの連合TL仕様（個人見解＞
自分のインスタンス上からの見た目で、連合TLに表示されるトゥートは以下の通り。
・自インスタンスのユーザがおこなった公開トゥート
・自インスタンスのユーザがブーストした公開トゥート（リモートユーザ含める）

というところから、能動的に連合TLを活性させるには。
・自インスタンスのユーザのトゥートを促進させる。
・自インスタンスのアカウントで、よくブーストするユーザをフォローしておく。
　2番目については自分でアカウントを建てれば簡単にできそう。



-----------------------
＜Node.jsのグローバル更新＞

https://qiita.com/Yorinton/items/00ad34f3f902ed41c12f

nコマンドを使ったアップデート。
この方法だとnvmなどで切り替えできなくてグローバル的にアップデートされる。
mastodonではこの方法でならアップデートが楽になりそう。

1. nをインストールする
# npm install -g n

2. Node.jsをアップデートする
# n stable     安定版
# n latest     最新版

sudoの設定をすれば効くらしい。
この場合、グローバルアップデートにはならない？（わからん）



-----------------------
＜Node.jsの管理：nvmコマンド＞

mastodonのリリースノートでNode.jsをアップデートするのに、curlからapt-getを起動する方法
で記載されているが、Cent OSの場合apt-getコマンドに対応してないためこの手順では
アップデートできない。

qiitaの先輩の記事にやり方が書いてあった。
てかこれも全部書いてあります（ありがたい）。
https://qiita.com/strsk/items/925644e124efcc964625


さくらのスクリプトを使う場合、mastodonユーザにnvmコマンドを入れるようにする。

1.mastodon権限に変更する。
# su - mastodon

2.nvmをインストールする。
$ git clone git://github.com/creationix/nvm.git ~/.nvm
$ source ~/.nvm/nvm.sh

3.Node.jsのリリースバージョン一覧を表示する。
$ nvm ls-remote

このなかで「Latest LTS: Carbon」のものが最新。

4.Node.jsをインストールする。
$ nvm install [ver番号]

5.バージョンを切り替える。
$ nvm use [ver番号]

6.今使っているNode.jsのバージョンを確認する。
$ node -v
[ver番号]
ここで4で入れたバージョンが表示されていればOK。

※nvmは複数のバージョンをシステムにインストールしておいて、
　バージョンを自由に切り替えできるツールらしい。



-----------------------
＜PgBouncerのインストール：CentOS版＞

mastodonに用意されているサポートソフトみたいなもん？
デフォルトだとpostgreのプロセスを多めに使うためメモリを大量に使うことになる。
PgBouncerを使うとプロセスの数を調整でき、メモリの消費を抑えることができるらしい。

なお、PgBouncerのマニュアルだと手順が大分異なるのと、追加設定が必要だったりする。
参考にしたのは以下のサイトだけどだいぶ違う。

参考：
http://fnya.cocolog-nifty.com/blog/2017/12/mastodon-centos.html

要するにOSごとのリポジトリ（postgreのドライバみたいなもん？）を先にインストールする
ことになってるらしい。

1.OSのバージョンを確認する。
　さくらインターネットの場合、VPSのサービス情報に記載されている。

2.postgreのバージョンを確認する。
# psql -V

3.postgreのページからリポジトリを選ぶ。
　1と2の結果で選択できる。
https://yum.postgresql.org/repopackages.php

4.あらかじめlibeventをインストールする。 ※てかいらないんじゃね？って思った
# yum install libevent-devel

5.リポジトリをダウンロードしてインストールする。
# wget [リポジトリのURL]
# rpm -ivh [リポジトリのファイル名]

6.PgBouncerをインストールする。
# yum -y install pgbouncer
# systemctl restart pgbouncer
# systemctl enable pgbouncer

7.パスワードをリセットする。
# su - mastodon
$ psql -p 5432 -U mastodon [mastodon_production] -w
  []はDB名。もしアクセスできなかったら、mastodonのコンフィグで確認する。
  /home/mastodon/live/.env.production

> ALTER USER "mastodon" WITH PASSWORD 'password';
ALTER ROLEが出ればOK。
  passwoedの部分でパスワードを設定する。
　間違ってもpasswordとしないこと。しぬで！

\qで抜ける


8.bgBouncerにパスワードを設定する。まずiniにアクセスする。
exit
# cd /etc/pgbouncer

9.パスワードのハッシュ値を取得する。
# echo -n "パスワード+mastodon" | md5sum
   +は省略する。mastodonはユーザ名。

10.カレントにuserlist.txtを作成し、中にmastodonと9のハッシュ値を入れる。
# vim userlist.txt
書式： "mastodon" "md5[10のハッシュ値]"

11. 9.10と同じ要領でpgbouncerユーザを追加する。（パスワードも別で決め設定すること）

12.pgbouncer.ini の設定をする。

[databases]
[db名] = host=127.0.0.1 port=5432 dbname=[db名] user=mastodon password=[パスワード]    ※追加

[pgbouncer]
auth_type = md5
admin_users = pgbouncer
pool_mode = transaction

※この２つはデフォルトで問題ないけど調整可能みたい
max_client_conn = 100
default_pool_size = 20


13.保存したらpostgresqlのログイン設定をmd5に変更する。
   ※ユーザ個別、DB個別でも設定できるっぽいけど、まあまあ。
# vim /var/lib/pgsql/9.6/data/pg_hba.conf
------
# TYPE  DATABASE        USER            ADDRESS                 METHOD
###local   all             all                                     peer
local   all             all                                     md5
# IPv4 local connections:
###host    all             all             127.0.0.1/32            ident
host    all             all             127.0.0.1/32            md5
------

14.pgbouncerとpostgresqlのサービスを再起動する。
# systemctl restart postgresql*
# systemctl restart pgbouncer
    ここで何も表示がでないことを確認する。

15.接続テスト。pgbouncerからmastodonのDBに接続できることを確認する。
# psql -p 6432 -h 127.0.0.1 -U mastodon [db名]
mastodon> 
  sqlのプロンプトになればOK。 \q  で抜ける。
  auth errorで蹴られたら設定の見直し。9項あたりが怪しいと思われます。

※もしかしたらここからmastodonが接続不良になるかもなので、手早くやる。


16.mastodonのコンフィグを変更する。パスワードの設定と、DBのポートを変更する設定。
# vim /home/mastodon/live/.env.production

PREPARED_STATEMENTS=false  ※一番上のほうに追加
DB_HOST=localhost
DB_USER=mastodon
DB_NAME=[db名]
DB_PASS=[password]  ※パスワードを設定
DB_PORT=6432        ※ここも変更する

17.mastodonサービスを再起動する。
# systemctl restart mastodon*

※mastodonのページで500、502が出なくなればOK。
　5分くらい不安定になることもあるかも。



-----------------------
＜mastodonのサービスチューニング＞

上記bgBouncerを導入するのが前提になると思う。
サービスの設定を最小稼働用に見直すみたい。

補足：
・シングルコアの場合は更にrabyのファイルで処理を変更する方法もあるけど
  うちはマルチコアなのでやらなかった。
・なんかエラーが出た手順は省略した。

参考：
http://crakac.hatenablog.jp/entry/2017/12/10/121956


1.mastodon webサービスの調整。
# vim /etc/systemd/system/mastodon-web.service
......
Environment="PORT=3000"
Environment="WEB_CONCURRENCY=[コア数]"  ※以下全て追加
Environment="MAX_THREADS=5"
Environment="RUBY_GC_HEAP_INIT_SLOTS=500000"
Environment="RUBY_GC_HEAP_GROWTH_FACTOR=1.2"
Environment="RUBY_GC_HEAP_GROWTH_MAX_SLOTS=1000000"
Environment="RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO=0.1"
Environment="RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO=0.3"
Environment="RUBY_GC_HEAP_OLDOBJECT_LIMIT_FACTOR=1.2"
Environment="RUBY_GC_OLDMALLOC_LIMIT_MAX=67108864"
......

2.mastodon ストリームサービスの調整。
# vim /etc/systemd/system/mastodon-streaming.service
※エラーが出たので今回はいじりません。

3.mastodon sidekiqサービスの調整。
# vim /etc/systemd/system/mastodon-sidekiq.service
Environment="DB_POOL=5"
ExecStart=/home/mastodon/.rbenv/shims/bundle exec sidekiq -c 5 -q default -q mailers -q pull -q push
↓
Environment="DB_POOL=20"
Environment="RUBY_GC_HEAP_INIT_SLOTS=500000"
Environment="RUBY_GC_HEAP_GROWTH_FACTOR=1.2"
Environment="RUBY_GC_HEAP_GROWTH_MAX_SLOTS=1000000"
Environment="RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO=0.1"
Environment="RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO=0.3"
Environment="RUBY_GC_HEAP_OLDOBJECT_LIMIT_FACTOR=1.2"
Environment="RUBY_GC_OLDMALLOC_LIMIT_MAX=67108864"
ExecStart=/home/mastodon/.rbenv/shims/bundle exec sidekiq -c 20 -q default,1 -q push,1 -q pull,1

4.mastodonサービスを再起動する。
# systemctl daemon-reload
# systemctl restart mastodon*
   ※デーモンを先に再起動しないと怒られる

5.スワップパラメータの調整。
値は0から100まででデフォルトは60。大きいほどよくスワップする。
0にするとRAMを使いきるまでスワップしない。
100だとパフォーマンスに悪影響を及ぼすレベルでガンガンスワップする。

# sysctl vm.swappiness
vm.swappiness = [現在値]

# vim /etc/sysctl.conf
vm.swappiness = 10  ※追加

再読み込みする
# sysctl -p

※ImageMagicあたりはよくわかんなかった。



-----------------------
＜ImageMagic 弱小鯖向けのビルド＞

ImageMagicの個人makeインストール方法（CentOS版）。
あとmastodonの場合、png形式を扱う機会が多いので（iPhoneユーザ向け）
pngのライブラリも別途makeインストールする必要がある。

参考
https://gist.github.com/crakaC/9f8f33aa8179234b19148e602bc980f4#file-install_imagemagick-md


1.先にpngライブラリを展開する。
ライブラリのページからアーカイブをダウンロードする。
http://www.libpng.org/pub/png/libpng.html

# wget [アーカイブのリンク]
# tar xvzf [アーカイブファイル名]
# cd [解凍されたフォルダ]

2.メイクする。
# ./configure --enable-shared
# make

3.インストールする。
# make install

4.ImageMagicのイメージを展開する。
ライブラリのフォルダからrootに移ってから作業する。
# cd ..
# wget https://www.imagemagick.org/download/ImageMagick.tar.gz
# tar xvzf ImageMagick.tar.gz
# cd [解凍されたフォルダ]

5.おまじない？？？
実行するとコケるけど気にしない。
pngのライブラリパスを通すことをやってるらしい。
# export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
# ./configure LDFLAGS='-L/usr/local/lib -R/usr/local/lib'

6.オプションを変更する
--with-quantum-depth  ※画像のbit数指定。デフォルトで16bitだけど、普通は8bitでも十分らしい。
--disable-openmp      ※シングルコアの場合効果あり
--without-threads     ※シングルコアの場合効果あり
--disable-hdri        ※HDRI変換を無効にすることでリソースが抑えられる
--with-png            ※pngの有効化。付けなくてもいい気もする。

★シングルコア向け
# ./configure --disable-hdri --with-quantum-depth=8 --with-png --disable-openmp --without-threads
# make

★マルチコア向け
# ./configure --disable-hdri --with-quantum-depth=8 --with-png
# make

このとき--with-pngがyesになってることを確認する。
noのままであれば5でがんばってパスを通すこと。（どうやるんぢゃ？）

7.インストールする。
# make install
# ldconfig /usr/local/lib  ※やらなくていい気もする

8.動作確認
# convert -version
  今日の日付で～Q8～であればOK。
  いちおmastodon権限でも試してみる。


その他：
何らかの不手際でリメイクするときはmakeファイルをクリアすること。
# make clean



-----------------------
＜SSL証明書の編集：サブドメインの追加＞
スタートアップスクリプトではLet's EmcryptのSSL証明書も作成されるが、
mastodonのドメインの登録のみで、サブドメインなどでアクセスすると証明書エラーとなる。
これを解決するため、証明書の更新（サブドメインの追加）をおこなう。

参考：
https://qiita.com/chamaharun/items/566c78bb8a13b4c2bc16


1.certbotをインストールする
cd /root
yum -y install certbot --enablerepo=epel
yum install git
git clone https://github.com/certbot/certbot.git
cd certbot

上記手順だとurllib3が書き換わるのでインストールしなおす（なんとかなんないのかなこれ..）
pip install --upgrade --force-reinstall 'requests==2.6.0' urllib3

3.nginxを停止する
sudo nginx -s stop

2.certbotを起動する
/root/certbot/certbot-auto certonly

3.入力する
2
[追加するドメイン]
2

4.サーバを再起動する
reboot だと起動が中途半端なのか上手くいかないのでコンソールから実施すること。

証明書の場所
/etc/letsencrypt/live/


-----------------------
＜ターミナルソフトからのアクセス＞
TeraTermからでもいいけど、dosのプロンプトからのがやりやすいかも。

root@<ホストアドレス>
管理者のパスワード


-----------------------
＜FTPでのアップロード（WinSCAP）＞
WinScapに秘密鍵ファイルを認識させる
「設定」－「SSH」－「認証」
秘密鍵
<ユーザディレクトリ>\.ssh\id_rsa.ppk

ユーザ：root
ホスト：ホストアドレス
パスフレーズ：管理者のパスワード


-----------------------
＜メモリの調整：redis＞

/etc/redis.conf

redis-cli info


http://t-cyrill.hatenablog.jp/entry/2016/12/11/224604


https://github.com/yoshiya0503/my-conf/tree/master/redis





-----------------------
＜バックアップ＞




http://fnya.cocolog-nifty.com/blog/2017/10/mastodon-3861.html

https://manual.sakura.ad.jp/cloud/appliance/database/postgresql.html


$ su - mastodon
$ mkdir dbbackup
$ cd dbbackup
$ pg_dump --username=mastodon --no-owner mastodon > prefix.`date +%Y%m%d_%H%M%S`.pgdump


/home/mastodon/live
.env.production

/etc/nginx
nginx.conf

/etc/nginx/conf.d
https.conf


aws s3 sync public/system/ s3://[バケット名]/ --endpoint-url=https://s3.wasabisys.com



-----------------------
＜nginxがnginx: [error] open()で起動できない場合の対処＞

1.nginxサービスを止める。
# service nginx stop

2.nginx関係のプロセスを見つける。
# ps aux | grep nginx

3.でてきたプロセスをすべてころす。
# systemctl kill -s 9 [サービス名]
サービス名..例えば nginx.service

4.nginxを起動する。
# service nginx start

5.サービスの状態を確認する。
# systemctl status nginx*

activeになっていればOK。



-----------------------
＜mastodonインスタンス爆破→再建＞
mastodonインスタンスを一回潰して、同じ手順で再開するときの動作要綱について。

結論として、同じドメイン、同じアカウントでの復活は可能。
ただし、接続している他のインスタンスのキューが蓄積したり、エラーがでるので、影響のあることを念頭に入れること。
こちらのsidekiqには待機キューが大量に蓄積するのが見えるはず。
おそらくはインスタンス間でなんらかの同期処理をやってると思われる。

sidekiqのログとか理解してないので詳しくは不明だが。
・同じドメイン名、アカウント名でインスタンス立て直すと、sidekiqの（連合TLのトゥート）が大量に蓄積する。
・蓄積したキュー消しても再度蓄積していく。
・キューが蓄積してる間は、トゥート、フォローなどはできない。
・連合の接続はそのまま残ってた。



-----------------------
＜mastodonインスタンスの閉じ方（提案）＞
参考記事これ：
https://qiita.com/kumasun/items/7aa50a7b1b6d90e322fc

1.1～3でnginxでHTTPステータスコード：410を吐かせる。
  sidekiqのアクセスを止めさせる効果があるとか。
　# vim /etc/nginx/conf.d/https.conf

location / {
    root /home/mastodon/live/public;
    return 410;
}
※他と被らないよう注意すること。

2.nginxを再起動する。
　# sudo nginx -s reload

3.mastodonでログインする。
  # su - mastodon
  # cd /home/mastodon/live

4.Railsコンソールを起動する。
  $ bundle exec rails console -e production

5.ローカルユーザを全てサスペンド（停止）する。
  > Account.where(domain: nil).partitioned.find_each do |account|
  >   printf "%s をサスペンドしています...\n", account.username
  >   SuspendAccountService.new.call(account)
  >   account.destroy()
  > end; 0

Scoped order is ignored, it's forced to be batch order.
がでればOK。

6.exitでコンソールを抜ける。
  sidekiqのキューが溜まると思うので7への操作は間を置くこと。
  ※確認ができない

以上で鯖を閉じられると思う。


-----------------------
＜削除されたリモートアカウントを自分のdbから削除する＞
垢削除されたり、インスタンスを閉じられて停止されたアカウントを自分のdbから削除する。

1.mastodonでログインする。
  # su - mastodon
  # cd /home/mastodon/live

2.リモートインスタンスから自分のアカウントの存在を消す。
  $ RAILS_ENV=production bundle exec rake mastodon:maintenance:purge_removed_accounts -f
  後ろの-fはオプションで、削除問い合わせをなくす。


-----------------------
＜用語＞
mastodon：ますとどん
ドイツのIT技術者オイゲン・ロチコ氏 (Eugen Rochko)が開発した、SNSサービスソフトウェア。
フリーソフトウェアであり、Linuxのクラウドサーバがあれば誰でも使用できる。
ストリームタイムライン機能を持ち、自分や他のユーザが投稿内容がリアルタイムに流れる。
twitterと違うのは、企業個人問わず誰でもmastodonサーバ（インスタンス）を建てられる点で、複数のインスタンスが存在する。
そのため、1つのインスタンスに問題があっても、他のインスタンスでmastodonの利用を続けることができる。
（アカウントはインスタンスごとに登録する必要がある）
有志でmastodon APIも提供されており、mastodonで動くアプリケーションや、mastodonのクライアントも開発できる。

mastodonが動く仕組み（lucida個人見解）
あんまよく理解してないです。
sidekiqがユーザやブラウザからのuriを実行し、Redisがsqlを中継、データの管理をpostgreSQLでおこなう。
dockerを使うかは任意で、使うとコマンドの記述を短縮化できるが、実際はリソースを食うらしい。

postgreSQL
オープンソースのデータベースのひとつ。
SQLで問い合わせできる。

sidekiq
Linuxで動作する非同期実行gem（カーネル）。
バックエンドにはRailsが必要。

Redis：Remote dictionary server
メモリ上にKey-Valueストア(KVS)を構築することができるソフトウェアの一つ。
KVSは任意の保存したいデータ(値：value)に対し、対応する一意の標識(キー：key)を設定し、
これらをペアで保存するデータベースの一種で。Redisはコンピュータのメインメモリ上にKVSを構築し、
外部のプログラムからデータの保存と読み出しができる。

Rails：Ruby on Rails：
スクリプト言語のRubyにより構築された、Webアプリケーション開発のためのフレームワーク。
MVC（Model-View-Controller）アーキテクチャをサポートしており、データベースに関する処理を担うモデル、
データの表示を行うビュー、それらを制御するコントローラの雛形を自動生成する機能を持っている。
データの作成・読み込み・更新・削除(CRUD)のみを行うような単純なWebアプリケーションであれば、
データテーブルの作成と雛形の自動生成を行うのみでほとんどの部分が開発できてしまう。
Webアプリケーションの多くはCRUD処理を中核としているので、Ruby on Railsを使うことによって多くのコード
の作成を自動化することができ、開発期間を短縮できる。

docker
コンテナ型の仮想化環境を提供するオープンソースソフトウェア。
アプリケーションを少ない資源で効率よく実行できる。



