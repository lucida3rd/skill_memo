-----------------------
mastodon 運用メモ

Lucida（lucida3rd@mstdn.lucida-memo.info）
-----------------------
＜概要＞
mastodon運用時によく使うコマンドや技をまとめます。

よく使う
　◆よく見るフォルダ・よく使うコマンド

バージョンアップ操作
　◆mastodonバージョンアップ手順
　◆Node.jsのグローバル更新
　◆postgreのアップデート手順
　◆rubyアップデート手順
　◆yarnアップデート手順
　◆SSL証明書の更新

運用テクニック
　◆サーバへの接続
　◆ファイアーウォールの操作
　◆nginxがnginx: [error] open()で起動できない場合の対処
　◆削除されたリモートアカウントを自分のdbから削除する
　◆cronの設定

インスタンスの再建・閉鎖
　◆mastodonインスタンス爆破→再建
　◆mastodonインスタンスの閉じ方（提案）
　◆mastodon DB"だけ"作りなおす場合

仕様メモ
　◆mastodonの連合TL仕様（個人見解
　◆用語



---------------------------------
＜注意事項＞
---------------------------------
・斜め読みしないで、各メモの効果、手順をよく確認してください。
  よくわかんないうちは使用しないでください。
・各メモには元ソースのリンクを貼り付けてますので、
  よくわかんないときはそちらも合わせて確認してください。
・このメモを使用したことによる不具合、損害について当方は責任を持ちません。
  全て自己責任でお願いします。
・当メモの質問は受け付けません。自己対応でお願いします。



---------------------------------
＜よく見るフォルダ・よく使うコマンド＞

◆nginx関係
コンフィグ
# vi /etc/nginx/conf.d/https.conf

再起動
# nginx -s reload

サービス確認
# systemctl status nginx


◆mastodonサービス関係
mastodonコンフィグ
# vi /home/mastodon/live/.env.production

mastodonのホーム
# cd /home/mastodon/live

サービス起動
# systemctl start mastodon*
サービス停止
# systemctl stop mastodon*
サービス再起動
# systemctl restart mastodon*
サービス状態の確認
# systemctl status mastodon*

サービス3つ。
# vi /etc/systemd/system/mastodon-sidekiq.service

# vi /etc/systemd/system/mastodon-web.service

# vi /etc/systemd/system/mastodon-streaming.service

ブランチを消す
#git branch -d [ブランチ名]


◆rails・s3バケツ関係
※全てmastodon権限、mastodon/live配下で実行すること。
またv2.5.0から一部rakeコマンドが、bin/tootctlに移行した。

amazon s3/wasabi バケットの手動同期
$ aws s3 sync public/system/ s3://[バケット名]/ --endpoint-url=https://s3.wasabisys.com

古いキャッシュ（とそれのトゥート）の削除
$ RAILS_ENV=production bin/tootctl media remove
日付を指定する場合
$ RAILS_ENV=production bin/tootctl media remove --days=1

管理者化
$ RAILS_ENV=production bin/tootctl accounts modify <ユーザID> --role admin
モデレータ化
$ RAILS_ENV=production bin/tootctl accounts modify <ユーザID> --role moderator
権限の剥奪（一般ユーザ化）
$ RAILS_ENV=production bin/tootctl accounts modify <ユーザID> --role user

ユーザ情報を更新する
$ RAILS_ENV=production bundle exec bin/tootctl accounts refresh <ユーザ名>
$ RAILS_ENV=production bundle exec bin/tootctl accounts refresh --domain <ドメイン名>
$ RAILS_ENV=production bundle exec bin/tootctl accounts refresh --all

外部インスタンスをパージする
$ RAILS_ENV=production bundle exec bin/tootctl domains purge <ドメイン名>

存在しないリモートユーザをパージする
$ RAILS_ENV=production bundle exec bin/tootctl accounts cull
  ※規模が大きいとフォロー者のブロックに失敗することもある

アクティブユーザのタイムラインを再構築する
$ RAILS_ENV=production bundle exec bin/tootctl feeds clear
$ RAILS_ENV=production bundle exec bin/tootctl feeds build


◆ディレクトリ

nginx configファイル
　/etc/nginx/conf.d

postfix設定ファイル
　/etc/postfix

Let's Encrupt証明書ファイル
　/etc/letsencrypt/live

cron設定ファイル
　/etc/cron.d

ログ類
　/var/log

スプーラ エラーログ(pythonとかもここ)
　/var/spool/mail


◆CentOS
ディレクトリ配下
# ls -la

現在のパス
# pwd

フォルダ以下の容量
# du -h -d 1 live/public/system/

ディスク容量
# df

3秒ごとにOSで利用しているプロセスの数や状態、またOS全体のシステムリソース状況
# top
　%CPU..CPU使用率
　%MEM..メモリ利用率
　左から7番目の「S」と書かれた列..プロセスの状態
　　R->Running(実行状態もしくは実行可能状態)
　　S->Sleeping(スリープ状態。ネットワークを介したデータ送受信の際もこのステータス)
　　D->Uninterruptible sleep(IO待ち)
　※プロセス状態がDの状態が続いてるプロセスがあればIO待ちによってパフォーマンス遅延が発生している可能性がある

メモリに特化して詳細を表示
# free
　Mem行のfree列の値は 何の用途にも使っていない物理メモリ量

環境変数の確認
# env

環境変数の追加
# export XXX=aaa

環境変数の削除
# unset XXX
  export XXX=""（空欄）では消えない

staptopの確認
# slabtop
deneyの削除
# echo 2 > /proc/sys/vm/drop_caches

アップデート
# yum update


◆postgres関係
https://qiita.com/rice_american/items/ceae28dad13c3977e3a8

バックアップ
$ pg_dump <DB名> > <バックアップ名>

スーパバイザユーザでのバックアップ
# pg_dump --superuser=postgres mastodon > dbback.pgdump


バキューム（手動）
デフォルト自動設定なので普段はやらなくていい。
mastodonではsuperuserしか実行できない。
$ vacuumdb <DB名>
  vacuumdb: vacuuming database "mastodon"で正常。


◆sendmailのテスト
$ sendmail foo@foo.com  # 送りたいメールアドレスを指定します
from:bar@bar.com        # 差出人(From)ヘッダを指定します
to:foo@foo.com          # 宛先(To)ヘッダを指定します
subject:テスト送信      # 件名(Subject)ヘッダを指定します
テスト送信してみました。# 内容(Body)を記入します
.                       # Bodyの入力が終わったら「.」を入力します


-----------------------
＜mastodonバージョンアップ手順：Master追従＞
※正式Releaseバージョンアップのほうは mastodonバージョンアップ手順：ORIGIN を参照のこと。

参考：
https://snap.textfile.org/20170509111842/
https://snap.textfile.org/20170509104726/
https://techacademy.jp/magazine/10268


まず、githubの自リポジトリを更新する。
1.githubデスクトップを起動する。

2.Current branch→Choose a branch～→upstream / masterを選ぶ。
  commitがあればcommitする。

3.changesで改造してる場合はcommit to～でコミットする。

4.Fetch originを押す。

5.https://github.com/tootsuite/mastodonと、gitbub desctopのHistoryと、自リポジトリ、を見比べて、
  issueの最新番号がそれぞれ合っているかを確認する。


ここからサーバ作業。
6.リモートが自分のリポジトリかを確認する。
# su - mastodon
$ cd live
$ git remote -v
origin  https://github.com/[自分のリポジトリ名].git (fetch)
origin  https://github.com/[自分のリポジトリ名].git (push)

自分のでなければ自分のリポジトリを再設定する。
$ git remote -v
$ git remote rm origin
$ git remote add origin git@github.com:[githubの自リポジトリ名]

7.リポジトリからpullする。
$ git pull
$ git checkout [自ブランチ名]  （※初回のみ？）
$ git fetch --tags origin
$ git merge [自ブランチ名]  ※いるのか？？？

8.Mastodonのバージョンアップに必要なコマンドを入力していく。

一般的なコマンド：
$ gem install bundler
$ bundle install --deployment --without development test
$ yarn install
$ RAILS_ENV=production bundle exec rails db:migrate
$ RAILS_ENV=production bundle exec rails assets:precompile

注意：もしprecompireでyarnのバージョンが古いと怒られたら以下を実行。（CentOSの場合）
$ curl --compressed -o- -L https://yarnpkg.com/install.sh | bash
　yarnのホームページ：https://yarnpkg.com/


9.Mastodonをリスタートし、バージョンアップを完了させる。
$ exit
# systemctl restart mastodon*
# systemctl status mastodon*

mastodon-web.service
mastodon-streaming.service
mastodon-sidekiq.service
３つのサービスがActiveであることを確認する。
また、ここまでの画面でWARNNINGが出てないことも確認する。



補足：
リモートを元に戻すには以下。
$ git remote rm origin
$ git remote add origin git@github.com:tootsuite/mastodon
$ git remote -v
origin  https://github.com/tootsuite/mastodon.git (fetch)
origin  https://github.com/tootsuite/mastodon.git (push)

$ git checkout [最新バージョン]


補足２：後から変更する場合？
サーバ側の設定。リモートを自分のリポジトリに変更する。
# su - mastodon
$ cd live
$ git remote -v
$ git remote rm origin
$ git remote add origin git@github.com:[githubの自リポジトリ名]



-----------------------
＜mastodonバージョンアップ手順：ORIGIN＞
参考：https://knowledge.sakura.ad.jp/8683/

Bumbバージョン（正式Release）をバージョンアップする手順。
リポジトリの操作をしないでラクにバージョンアップできて安定的にmastodonを運用できるが、
正式リリース以降のissueを適用できない。

1.mastodon権限にログインする。
# su - mastodon
$ cd live

2.gitから最新のリポジトリを引っ張り、タグを表示する。
$ git fetch --tags

3.ローカルを退避して、ブランチを切り替えたあと、退避を戻す。
提供されている最新バージョンがv1.6.1として、
v1.6.0からv1.6.1へのバージョンアップを行う仮定で手順を記載。
$ git status           //ローカルリポジトリの内容を確認する
$ git stash save       //変更を一時退避する
$ git checkout v1.6.1  //ブランチをv1.6.1に切り替える
$ git stash pop        //退避を戻して、退避を消す
$ git branch           //ブランチの一覧を表示する

  以下のように表示されればbranchの移動に成功している。
$ git branch
* (detached from v1.6.1)
  master

4.Mastodonのバージョンアップに必要なコマンドを入力していく。
コマンドはmastodonのRelease Noteに書いてある。
DockerとNon-Docker、環境によって手順が異なることに留意する。
（うちはどうやらNon-Dockerらしい）

一般的なコマンド：
$ gem install bundler
$ bundle install --deployment --without development test
$ yarn install
$ RAILS_ENV=production bundle exec rails db:migrate
$ RAILS_ENV=production bundle exec rails assets:precompile

注意：もしprecompireでyarnのバージョンが古いと怒られたら以下を実行。（CentOSの場合）
$ curl --compressed -o- -L https://yarnpkg.com/install.sh | bash
　yarnのホームページ：https://yarnpkg.com/


5.Mastodonをリスタートし、バージョンアップを完了させる。
$ exit
# systemctl restart mastodon*
# systemctl status mastodon*

mastodon-web.service
mastodon-streaming.service
mastodon-sidekiq.service
３つのサービスがActiveであることを確認する。
また、ここまでの画面でWARNNINGが出てないことも確認する。


-----------------------
＜Node.jsのグローバル更新＞

https://qiita.com/Yorinton/items/00ad34f3f902ed41c12f

リリース
https://nodejs.org/ja/

nコマンドを使ったアップデート。
この方法だとnvmなどで切り替えできなくてグローバル的にアップデートされる。
mastodonではこの方法でならアップデートが楽になりそう。

1.バージョン確認
# node -v

2. nをインストールする
# npm install -g n

3. Node.jsをアップデートする
# n stable     安定版
# n latest     最新版

sudoの設定をすれば効くらしい。
この場合、グローバルアップデートにはならない？（わからん）


-----------------------
＜redisのアップデート手順＞

いちお2パターンあるけど、リポジトリから入れたほうが圧倒的にラクかと。

バージョンを確認する
# redis-server --version
# redis-cli
  mastodonの管理画面で表示されているのはクライアントのバージョン

redisのサイト
https://redis.io/
  ※githubにもあるけど本家からのがいい？


パターン１：リポジトリからアップグレード
CentOS7にはEPELリポジトリがないので追加する。

1.EPELリポジトリを追加する
# yum -y install epel-release

2.最新のredisが提供されていることを確認する
# yum search redis
# yum info redis

3.インストール
# yum install -y redis

4.リブートする
# reboot


パターン２：makeからアップグレード

参考：
https://qiita.com/n0bisuke/items/2448010c0dfaf8a20167

1.アーカイブを解凍する
# wget [本家URL]
# tar xzf [アーカイブ名]
# cd [解凍フォルダ名]

2.make→installする
# make

3.リブートする
# reboot


-----------------------
＜nginxのアップデート手順＞

参考：
https://qiita.com/sashihara/items/c193f130a265f20ad592





https://nginx.org/en/








-----------------------
＜postgreのアップデート手順＞

例：postgres-9.6→11へのアップグレード

参考：
http://beeete2.hatenablog.jp/entry/2017/02/18/172304
https://pgsql-jp.github.io/jpug-doc/9.6.5/postgresql-9.6.5-A4.pdf

https://qiita.com/syumari/items/f90b89262f5ad48be3a8


1.mastodonを止めてバックアップする。
# systemctl stop mastodon*

# su - mastodon
$ pg_dump --superuser=postgres mastodon > dbback.pgdump
$ exit

3.旧postgreSQLを削除する。
# systemctl stop postgresql*
# systemctl disable postgresql-9.6
# yum erase postgresql96-{server,contrib,devel}

4.最新のpostgresqlをダウンロードする。
https://www.postgresql.org/download/
でリポジトリ、インストールコマンドを確認。

# yum install [リポジトリ]
# yum install postgresql11
# yum install postgresql11-server
# /usr/pgsql-11/bin/postgresql-11-setup initdb

5.自動起動の設定を行う。
# systemctl enable postgresql-11
# systemctl start postgresql-11

6.コンフィグを確認する。

7.postgres、mastodonユーザのパスワードリセット

postgresのconfigで認証方式をtrustに書き換える。
# vi /var/lib/pgsql/[バージョン]/data/pg_hba.conf
------
# TYPE  DATABASE        USER            ADDRESS                 METHOD
local   all             all                                     trust	★
# IPv4 local connections:
host    all             all             127.0.0.1/32            trust	★
------
# systemctl restart postgresql-11

# psql -U postgres

postgres=> alter role postgres with password '[パスワード]';
ここで ALTER ROLE が出ればOK。

postgres=> create role mastodon with login password '[パスワード]';

9.DBをリストアする。
コネクションを切断する（念のため）
postgres # SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'mastodon' AND pid <> pg_backend_pid();

データベースを作成する。
postgres # create database mastodon;
postgres # \q

mastodon権限でリストアする。
# su - mastodon
$ cd [バックアップファイルの場所]
$ psql mastodon < [バックアップ名]

$ exit

postgresのconfigで認証方式をmd5に書き換える。
# vi /var/lib/pgsql/[バージョン]/data/pg_hba.conf


10.サーバをリブートして、サービスの状態を確認する。
# reboot

# systemctl status postgresql*
# systemctl status pgbouncer*
# systemctl status mastodon*


タイムラインが乱れていたら再構築する。
# su - mastodon
$ cd live
$ RAILS_ENV=production bundle exec bin/tootctl feeds clear
$ RAILS_ENV=production bundle exec bin/tootctl feeds build


-----------------------
＜rubyアップデート手順＞

まずruby-buildが入っていることが前提になります。
入っていないと正確なバージョンが表示できなかったり、バージョンリストが取得できないようです。
（さくらのスクリプトでセットアップされた場合は入ってます）

参考：
https://qiita.com/Kaisyou/items/b51c9854bd040046d599

1.mastodon権限に切り替える。
# su - mastodon

2.ruby-buildのインストールフォルダに移動する。
$ cd /home/mastodon/.rbenv/plugins/ruby-build
※not fontだったらruby-buildをinstallする(通常はinstallされていると思う)

3.現在のバージョンを確認する。
$ rbenv versions

4.gitからバージョンリストを取得する。
$ git pull
$ rbenv install --list

5.インストールする。
$ rbenv install -v [インストールしたいバージョン名]
※2.5.3の場合
  $ rbenv install -v 2.5.3

6.バージョンを上げる。
$ rbenv global [5項のバージョン名]

7.pathを通す。（※新規インストールの場合のみ）
$ echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bash_profile
$ echo 'eval "$(rbenv init -)"' >> ~/.bash_profile
$ exec $SHELL -l

8.現在のバージョンを確認する。
$ rbenv versions

* [5項のバージョン] に切り替わっていればOK。


-----------------------
＜yarnアップデート手順＞

mastodonアップデート中、bundle exec実行中にyarnのアップデートを促されたら（WARNNINGとして出力）
yarnのアップデートを行うこと。
コマンドはWARNNINGに記載されているが、念のため以下にも記載する。

# su - mastodon
$ cd live
$ curl --compressed -o- -L https://yarnpkg.com/install.sh | bash


-----------------------
＜サーバへの接続＞

◆ターミナルソフト→鯖へ接続
TeraTermからでもいいけど、dosのプロンプトからのがやりやすいかも。
> ssh root@[ホストIPアドレス] -i [秘密鍵(拡張子がない)のパス]
  例：ssh root@xxx.xxx.xxx.xxx -i C:\Users\User1\.ssh\id_kagi

サーバ管理者のパスワード


◆FTP接続（WinSCAP）
WinScapに秘密鍵ファイルを認識させる
「設定」－「SSH」－「認証」
秘密鍵
<ユーザディレクトリ>\.ssh\id_rsa.ppk

ユーザ：root
ホスト：ホストアドレス
パスフレーズ：管理者のパスワード


-----------------------
＜ファイアーウォールの操作＞

ファイアーウォールが動作しているかを見る。
# firewall-cmd --state

設定一覧を見る。
# firewall-cmd --list-all

ポートを開ける。
# firewall-cmd --add-port=***/tcp --zone=public --permanent

ポートを閉じる。
# firewall-cmd --remove-port=***/tcp --zone=public --permanent

ファイアーウォール設定をリロードする
# firewall-cmd --reload

ログの制御
# firewall-cmd --set-log-denied=[設定値]
設定値
all=全出力(拒否含む)
off=出力しない
ログは /var/log/message に出力される。


-----------------------
＜nginxがnginx: [error] open()で起動できない場合の対処＞

1.nginxサービスを止める。
# service nginx stop

2.nginx関係のプロセスを見つける。
# ps aux | grep nginx

3.でてきたプロセスをすべてころす。
# systemctl kill -s 9 [サービス名]
サービス名..例えば nginx.service

4.nginxを起動する。
# service nginx start

5.サービスの状態を確認する。
# systemctl status nginx*

activeになっていればOK。


-----------------------
＜削除されたリモートアカウントを自分のdbから削除する＞
垢削除されたり、インスタンスを閉じられて停止されたアカウントを自分のdbから削除する。

1.mastodonでログインする。
  # su - mastodon
  # cd /home/mastodon/live

2.リモートインスタンスから自分のアカウントの存在を消す。
  $ RAILS_ENV=production bundle exec rake mastodon:maintenance:purge_removed_accounts -f
  後ろの-fはオプションで、削除問い合わせをなくす。


-----------------------
＜SSL証明書の編集：サブドメインの追加＞
スタートアップスクリプトではLet's EmcryptのSSL証明書も作成されるが、
mastodonのドメインの登録のみで、サブドメインなどでアクセスすると証明書エラーとなる。
これを解決するため、証明書の更新（サブドメインの追加）をおこなう。

参考：
https://qiita.com/chamaharun/items/566c78bb8a13b4c2bc16

https://letsencrypt.jp/usage/#ExecClientSoftware


1.certbotをインストールする
cd /root
yum -y install certbot --enablerepo=epel
yum install git
git clone https://github.com/certbot/certbot.git
cd certbot

2.上記手順だとurllib3が書き換わるのでインストールしなおす（なんとかなんないのかなこれ..）
# pip install --upgrade --force-reinstall 'requests==2.6.0' urllib3


証明書の発行：サブドメインなしの場合
# certbot certonly --webroot -w [ドメインのカレントフォルダ] -d [ドメイン名]

証明書の発行：サブドメインありの場合
-dオプションで関連付けられる。
# certbot certonly --webroot -w [ドメインのカレントフォルダ] -d [ドメイン名] -d[サブドメイン1] -d [サブドメイン1]

証明書の発行：別カレントのサブドメイン
-wオプションで関連付けられる。
# certbot certonly --webroot -w [ドメインのカレントフォルダ] -d [ドメイン名] -w [サブドメインのカレントフォルダ] -d [サブドメイン1]


4.nginxを再起動する。
# nginx -s reload


証明書の場所
/etc/letsencrypt/live/


-----------------------
＜cronの設定＞

タイムスケジューラの設定方法。
参考：
https://www.server-memo.net/tips/etc-crontab.html


cronファイル：
/etc/cron.d/0hourly
  パーミッションは644
  所有者はroot

書式：
分　時　日　月　曜日　実行ユーザ　実行コマンド

例：
毎時15分にキャッシュをクリアする
15 * * * * root echo 2 > /proc/sys/vm/drop_caches


＜cronが動かない場合＞
・ログを確認
  /var/log/cron
・メールの確認
  /var/spool/mail
・crondが動作しているか確認
  service crond status
・ファイルのパーミッション・所有者の確認
  rootユーザ以外に実行権限や書き込み権限があったりすると実行されない
・改行コードの確認
  0hourlyに改行コード「CR+LF」が含まれると動作しないことがある。
  「CR+LF」→「LF」のみに置き換えるか、Linux上でviなどで改行コードをつけなおす。
  ※特にwindowsで作ったファイルを転送した場合、注意が必要


-----------------------
＜mastodon DBのリストア＞

参考：
https://qiita.com/rice_american/items/ceae28dad13c3977e3a8
http://fnya.cocolog-nifty.com/blog/2017/10/mastodon-3861.html

バックアップ
$ pg_dump --superuser=postgres mastodon > <バックアップ名>
$ cd /home/mastodon/live/public/system
  ここもバックアップ（ファイル退避）しておく。


リストア
1.postgresでpostgresSQLに入る。
# psql -U postgres

2.コネクションを切断する。
postgres # SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'mastodon' AND pid <> pg_backend_pid();

3.データベースを削除して、作成する。
postgres # drop database mastodon;
postgres # create database mastodon;
postgres # \q

4.mastodon権限でリストアする。
# su - mastodon
$ cd [バックアップファイルの場所]
$ psql mastodon < [バックアップ名]

5.mastodon再起動？
$ exit
# systemctl restart mastodon*
# systemctl status mastodon*

6.タイムラインを再構築する。
# su - mastodon
$ cd live
$ RAILS_ENV=production bundle exec bin/tootctl feeds clear
$ RAILS_ENV=production bundle exec bin/tootctl feeds build


-----------------------
＜mastodonインスタンス爆破→再建＞
mastodonインスタンスを一回潰して、同じ手順で再開するときの動作要綱について。

結論として、同じドメイン、同じアカウントでの復活は可能。
ただし、接続している他のインスタンスのキューが蓄積したり、エラーがでるので、影響のあることを念頭に入れること。
こちらのsidekiqには待機キューが大量に蓄積するのが見えるはず。
おそらくはインスタンス間でなんらかの同期処理をやってると思われる。

sidekiqのログとか理解してないので詳しくは不明だが。
・同じドメイン名、アカウント名でインスタンス立て直すと、sidekiqの（連合TLのトゥート）が大量に蓄積する。
・蓄積したキュー消しても再度蓄積していく。
・キューが蓄積してる間は、トゥート、フォローなどはできない。
・連合の接続はそのまま残ってた。



-----------------------
＜mastodonインスタンスの閉じ方（提案）＞
参考記事これ：
https://qiita.com/kumasun/items/7aa50a7b1b6d90e322fc

1.1～3でnginxでHTTPステータスコード：410を吐かせる。
  sidekiqのアクセスを止めさせる効果があるとか。
　# vim /etc/nginx/conf.d/https.conf

location / {
    root /home/mastodon/live/public;
    return 410;
}
※他と被らないよう注意すること。

2.nginxを再起動する。
　# sudo nginx -s reload

3.mastodonでログインする。
  # su - mastodon
  # cd /home/mastodon/live

4.Railsコンソールを起動する。
  $ bundle exec rails console -e production

5.ローカルユーザを全てサスペンド（停止）する。
  > Account.where(domain: nil).partitioned.find_each do |account|
  >   printf "%s suspending...\n", account.username
  >   SuspendAccountService.new.call(account)
  >   account.destroy()
  > end; 0

Scoped order is ignored, it's forced to be batch order.
がでればOK。

6.exitでコンソールを抜ける。
  sidekiqのキューが溜まると思うので7への操作は間を置くこと。
  ※確認ができない

以上で鯖を閉じられると思う。


-----------------------
＜mastodon DB"だけ"作りなおす場合＞

postgresユーザはスーパバイザでログインできることが前提（buildに手順あり）。

1.postgresでpostgresSQLに入る。
# psql -U postgres

2.DBがある場合、データベースを削除する。
postgres # drop database mastodon;

3.DBを作成する。
postgres # create database mastodon;
postgres # \q

4.mastodon権限でログインする。
# su - mastodon
$ cd live

5.マイグレーションする。
$ RAILS_ENV=production bundle exec rails db:migrate

これでOK。


-----------------------
＜nginx+python(uwsgi)＞

webサーバでpythonを実行する方法。uwsgiを使う。
なおpython2.0が前提。

参考：
https://qiita.com/waffle/items/835625c2413ff6a387c6

1.uwsgiをインストールする。
# pip install uwsgi
# uwsgi --version
2.0.17.1  ※バージョンが表示されればOK。

2.uwsgiの設定を作る。
# mkdir -p /etc/uwsgi/vassals
# vi /etc/uwsgi/emperor.ini

[uwsgi]
emperor = /etc/uwsgi/vassals
uid = nginx
gid = nginx
logto = /var/log/uwsgi/uwsgi.log
touch-logreopen = /var/log/uwsgi/touch-logreopen
master = true
vacuum = true
ignore-sigpipe = true
ignore-write-errors = true
disable-write-exception = true

# vi /etc/uwsgi/vhosts.ini

[uwsgi]
chdir = /home/app/%n/wsgi    ※pythonの実行ルート
module = wsgi:application
socket = /var/run/uwsgi/%n.sock
chmod-socket = 644
reload-mercy = 1
processes = %k
die-on-term = true
py-autoreload = 1
enable-threads = true
threads = 8

3.シンボリックリンクを作成。
# cd /etc/uwsgi/vassals
# ln -s ../vhosts.ini example.com.ini

4.uwsgiのサービス化。
# vi /etc/systemd/system/uwsgi.service

[Unit]
Description=uWSGI Emperor
After=syslog.target

[Service]
ExecStartPre=-/bin/mkdir -p /var/log/uwsgi
ExecStartPre=-/bin/chown -R nginx:nginx /var/log/uwsgi
ExecStartPre=-/bin/mkdir -p /var/run/uwsgi
ExecStartPre=-/bin/chown -R nginx:nginx /var/run/uwsgi
ExecStart=/usr/bin/uwsgi --ini /etc/uwsgi/emperor.ini
RuntimeDirectory=uwsgi
Restart=always
KillSignal=SIGQUIT
Type=notify
StandardError=syslog
NotifyAccess=all

[Install]
WantedBy=multi-user.target

# systemctl start uwsgi
# systemctl status uwsgi
# systemctl enable uwsgi

5.uwsgiの循環ログ
# vi /etc/logrotate.d/uwsgi

/var/log/uwsgi/uwsgi.log {
    compress
    daily
    missingok
    notifempty
    rotate 7
    sharedscripts
    size 1M
    postrotate
        touch /var/log/uwsgi/touch-logreopen
    endscript
}

6.nginxの設定。

server {
    listen 443 ssl;
    server_name example.com;
    root /home/app/example.com;
    location / {
        try_files /resource$uri @uwsgi;
    }
    location @uwsgi {
        include uwsgi_params;
        uwsgi_pass unix:///var/run/uwsgi/example.com.sock;
        uwsgi_connect_timeout 600s;
        uwsgi_read_timeout 600s;
    }
    ssl_certificate     /etc/nginx/ssl/self_signed.crt;
    ssl_certificate_key /etc/nginx/ssl/self_signed.key;
}









-----------------------
＜mastodonの連合TL仕様（個人見解＞
自分のインスタンス上からの見た目で、連合TLに表示されるトゥートは以下の通り。
・自インスタンスのユーザがおこなった公開トゥート
・自インスタンスのユーザがブーストした公開トゥート（リモートユーザ含める）

というところから、能動的に連合TLを活性させるには。
・自インスタンスのユーザのトゥートを促進させる。
・自インスタンスのアカウントで、よくブーストするユーザをフォローしておく。
　2番目については自分でアカウントを建てれば簡単にできそう。


-----------------------
＜用語＞
mastodon：ますとどん
ドイツのIT技術者オイゲン・ロチコ氏 (Eugen Rochko)が開発した、SNSサービスソフトウェア。
フリーソフトウェアであり、Linuxのクラウドサーバがあれば誰でも使用できる。
ストリームタイムライン機能を持ち、自分や他のユーザが投稿内容がリアルタイムに流れる。
twitterと違うのは、企業個人問わず誰でもmastodonサーバ（インスタンス）を建てられる点で、複数のインスタンスが存在する。
そのため、1つのインスタンスに問題があっても、他のインスタンスでmastodonの利用を続けることができる。
（アカウントはインスタンスごとに登録する必要がある）
有志でmastodon APIも提供されており、mastodonで動くアプリケーションや、mastodonのクライアントも開発できる。

mastodonが動く仕組み（lucida個人見解）
あんまよく理解してないです。
sidekiqがユーザやブラウザからのuriを実行し、Redisがsqlを中継、データの管理をpostgreSQLでおこなう。
dockerを使うかは任意で、使うとコマンドの記述を短縮化できるが、実際はリソースを食うらしい。

postgreSQL
オープンソースのデータベースのひとつ。
SQLで問い合わせできる。

sidekiq
Linuxで動作する非同期実行gem（カーネル）。
バックエンドにはRailsが必要。

Redis：Remote dictionary server
メモリ上にKey-Valueストア(KVS)を構築することができるソフトウェアの一つ。
KVSは任意の保存したいデータ(値：value)に対し、対応する一意の標識(キー：key)を設定し、
これらをペアで保存するデータベースの一種で。Redisはコンピュータのメインメモリ上にKVSを構築し、
外部のプログラムからデータの保存と読み出しができる。

Rails：Ruby on Rails：
スクリプト言語のRubyにより構築された、Webアプリケーション開発のためのフレームワーク。
MVC（Model-View-Controller）アーキテクチャをサポートしており、データベースに関する処理を担うモデル、
データの表示を行うビュー、それらを制御するコントローラの雛形を自動生成する機能を持っている。
データの作成・読み込み・更新・削除(CRUD)のみを行うような単純なWebアプリケーションであれば、
データテーブルの作成と雛形の自動生成を行うのみでほとんどの部分が開発できてしまう。
Webアプリケーションの多くはCRUD処理を中核としているので、Ruby on Railsを使うことによって多くのコード
の作成を自動化することができ、開発期間を短縮できる。

docker
コンテナ型の仮想化環境を提供するオープンソースソフトウェア。
アプリケーションを少ない資源で効率よく実行できる。




