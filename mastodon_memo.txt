-----------------------
mastodon 運用メモ
-----------------------

＜よく見るフォルダ＞
nginxのコンフィグ
vim /etc/nginx/conf.d/https.conf
  nginx再起動 # sudo nginx -s reload

mastodonコンフィグ
vim /home/mastodon/live/.env.production

CentOSエラーログ
cd /var/spool/mail

mastodonのホーム
cd /home/mastodon/live

フォルダ以下の容量
du -h -d 1 live/public/system/

7日以前の画像キャッシュ（とそれのトゥート）の削除
mastodon/live配下で
RAILS_ENV=production bundle exec rake mastodon:media:remove_remote

アバターの取り直し（高負荷）
mastodon/live配下で
RAILS_ENV=production bundle exec rake mastodon:media:redownload_avatars

管理者化
RAILS_ENV=production bundle exec rails mastodon:make_admin USERNAME=<ユーザID>
権限の剥奪（一般ユーザ化）
RAILS_ENV=production bundle exec rails mastodon:revoke_staff USERNAME=<ユーザID>

mastodonサービスの制御
起動
systemctl start mastodon*
停止
systemctl stop mastodon*
再起動
systemctl restart mastodon*

amazon s3/wasabi バケットの手動同期
aws s3 sync public/system/ s3://[バケット名]/ --endpoint-url=https://s3.wasabisys.com


localhost:4000


-----------------------
＜centosコマンド＞
df
ディスク容量

top
3秒ごとにOSで利用しているプロセスの数や状態、またOS全体のシステムリソース状況
　%CPU..CPU使用率
　%MEM..メモリ利用率
　左から7番目の「S」と書かれた列..プロセスの状態
　　R->Running(実行状態もしくは実行可能状態)
　　S->Sleeping(スリープ状態。ネットワークを介したデータ送受信の際もこのステータス)
　　D->Uninterruptible sleep(IO待ち)
　※プロセス状態がDの状態が続いてるプロセスがあればIO待ちによってパフォーマンス遅延が発生している可能性がある

vmstat
メモリやCPU使用率
　cpu項の「id」列ではアイドル(空いている)割合をパーセントで表示
　「wa」列ではストレージのIO完了待ちを示す。

ps
現在利用しているプロセス・ストッドごとのCPUやメモリ使用率が分かる。

free
メモリに特化して詳細を表示
　Mem行のfree列の値は 何の用途にも使っていない物理メモリ量

cat /proc/meminfo
メモリの詳細がわかる。

dmidecode --type memory
dmidecode --type memory | grep Size
実装されている物理メモリの詳細。


-----------------------
＜mastodonバージョンアップ手順＞
参考：https://knowledge.sakura.ad.jp/8683/

mastodon権限にログインする。
su - mastodon
cd live


リリースされてるブランチの確認。
git fetch --tags


インストールされているバージョンがv1.6.0、
提供されている最新バージョンがv1.6.1として、
v1.6.0からv1.6.1へのバージョンアップを行う仮定で手順を記載。
v1.6.1（バージョンアップする）のbranchに移動。

git checkout v1.6.1
git stash pop
git branch

以下のように表示されればbranchの移動に成功している。
$ git branch
* (detached from v1.6.1)
  master


Mastodonのバージョンアップに必要なコマンドを入力していく。
コマンドはRelease Noteに書いてある。
DockerとNon-Docker、環境によって手順が異なることに留意する。
（うちはどうやらNon-Dockerらしい）

一般的なコマンド：
gem install bundler 
bundle install --deployment --without development test 
yarn install 
RAILS_ENV=production bundle exec rails db:migrate
RAILS_ENV=production bundle exec rake mastodon:maintenance:add_static_avatars
RAILS_ENV=production bundle exec rails assets:precompile


Mastodonをリスタートし、バージョンアップを完了させる。
exit
systemctl restart mastodon*


-----------------------
＜mastodonプリコンパイル＞
su - mastodon
bundle exec rails assets:precompile RAILS_ENV=production
exit
systemctl restart mastodon*


-----------------------
＜mastodonの連合TL仕様（個人見解＞
自分のインスタンス上からの見た目で、連合TLに表示されるトゥートは以下の通り。
・自インスタンスのユーザがおこなった公開トゥート
・自インスタンスのユーザがブーストした公開トゥート（リモートユーザ含める）

というところから、能動的に連合TLを活性させるには。
・自インスタンスのユーザのトゥートを促進させる。
・自インスタンスのアカウントで、よくブーストするユーザをフォローしておく。
　2番目については自分でアカウントを建てれば簡単にできそう。



-----------------------
＜SSL証明書の編集：サブドメインの追加＞
スタートアップスクリプトではLet's EmcryptのSSL証明書も作成されるが、
mastodonのドメインの登録のみで、サブドメインなどでアクセスすると証明書エラーとなる。
これを解決するため、証明書の更新（サブドメインの追加）をおこなう。

参考：
https://qiita.com/chamaharun/items/566c78bb8a13b4c2bc16


1.certbotをインストールする
cd /root
yum -y install certbot --enablerepo=epel
yum install git
git clone https://github.com/certbot/certbot.git
cd certbot

上記手順だとurllib3が書き換わるのでインストールしなおす（なんとかなんないのかなこれ..）
pip install --upgrade --force-reinstall 'requests==2.6.0' urllib3

3.nginxを停止する
sudo nginx -s stop

2.certbotを起動する
/root/certbot/certbot-auto certonly

3.入力する
2
[追加するドメイン]
2

4.サーバを再起動する
reboot



-----------------------
＜ターミナルソフトからのアクセス＞
TeraTermからでもいいけど、dosのプロンプトからのがやりやすいかも。

root@<ホストアドレス>
管理者のパスワード


-----------------------
＜FTPでのアップロード（WinSCAP）＞
WinScapに秘密鍵ファイルを認識させる
「設定」－「SSH」－「認証」
秘密鍵
<ユーザディレクトリ>\.ssh\id_rsa.ppk

ユーザ：root
ホスト：ホストアドレス
パスフレーズ：管理者のパスワード


-----------------------
＜メモリの調整：redis＞

/etc/redis.conf

redis-cli info


http://t-cyrill.hatenablog.jp/entry/2016/12/11/224604


https://github.com/yoshiya0503/my-conf/tree/master/redis






-----------------------
＜mastodonインスタンス爆破→再建＞
mastodonインスタンスを一回潰して、同じ手順で再開するときの動作要綱について。

結論として、同じドメイン、同じアカウントでの復活は可能。
ただし、接続している他のインスタンスのキューが蓄積したり、エラーがでるので、影響のあることを念頭に入れること。
こちらのsidekiqには待機キューが大量に蓄積するのが見えるはず。
おそらくはインスタンス間でなんらかの同期処理をやってると思われる。

sidekiqのログとか理解してないので詳しくは不明だが。
・同じドメイン名、アカウント名でインスタンス立て直すと、sidekiqの（連合TLのトゥート）が大量に蓄積する。
・蓄積したキュー消しても再度蓄積していく。
・キューが蓄積してる間は、トゥート、フォローなどはできない。
・連合の接続はそのまま残ってた。



-----------------------
＜mastodonインスタンスの閉じ方（提案）＞
参考記事これ：
https://qiita.com/kumasun/items/7aa50a7b1b6d90e322fc

1.1～3でnginxでHTTPステータスコード：410を吐かせる。
  sidekiqのアクセスを止めさせる効果があるとか。
　# vim /etc/nginx/conf.d/https.conf

location / {
    root /home/mastodon/live/public;
    return 410;
}
※他と被らないよう注意すること。

2.nginxを再起動する。
　# sudo nginx -s reload

3.mastodonでログインする。
  # su - mastodon
  # cd /home/mastodon/live

4.Railsコンソールを起動する。
  $ bundle exec rails console -e production

5.ローカルユーザを全てサスペンド（停止）する。
  > Account.where(domain: nil).partitioned.find_each do |account|
  >   printf "%s をサスペンドしています...\n", account.username
  >   SuspendAccountService.new.call(account)
  >   account.destroy()
  > end; 0

Scoped order is ignored, it's forced to be batch order.
がでればOK。

6.exitでコンソールを抜ける。
  sidekiqのキューが溜まると思うので7への操作は間を置くこと。
  ※確認ができない

以上で鯖を閉じられると思う。


-----------------------
＜削除されたリモートアカウントを自分のdbから削除する＞
垢削除されたり、インスタンスを閉じられて停止されたアカウントを自分のdbから削除する。

1.mastodonでログインする。
  # su - mastodon
  # cd /home/mastodon/live

2.リモートインスタンスから自分のアカウントの存在を消す。
  $ RAILS_ENV=production bundle exec rake mastodon:maintenance:purge_removed_accounts -f
  後ろの-fはオプションで、削除問い合わせをなくす。


-----------------------
＜用語＞
mastodon：ますとどん
ドイツのIT技術者オイゲン・ロチコ氏 (Eugen Rochko)が開発した、SNSサービスソフトウェア。
フリーソフトウェアであり、Linuxのクラウドサーバがあれば誰でも使用できる。
ストリームタイムライン機能を持ち、自分や他のユーザが投稿内容がリアルタイムに流れる。
twitterと違うのは、企業個人問わず誰でもmastodonサーバ（インスタンス）を建てられる点で、複数のインスタンスが存在する。
そのため、1つのインスタンスに問題があっても、他のインスタンスでmastodonの利用を続けることができる。
（アカウントはインスタンスごとに登録する必要がある）
有志でmastodon APIも提供されており、mastodonで動くアプリケーションや、mastodonのクライアントも開発できる。

mastodonが動く仕組み（lucida個人見解）
あんまよく理解してないです。
sidekiqがユーザやブラウザからのuriを実行し、Redisがsqlを中継、データの管理をpostgreSQLでおこなう。
dockerを使うかは任意で、使うとコマンドの記述を短縮化できるが、実際はリソースを食うらしい。

postgreSQL
オープンソースのデータベースのひとつ。
SQLで問い合わせできる。

sidekiq
Linuxで動作する非同期実行gem（カーネル）。
バックエンドにはRailsが必要。

Redis：Remote dictionary server
メモリ上にKey-Valueストア(KVS)を構築することができるソフトウェアの一つ。
KVSは任意の保存したいデータ(値：value)に対し、対応する一意の標識(キー：key)を設定し、
これらをペアで保存するデータベースの一種で。Redisはコンピュータのメインメモリ上にKVSを構築し、
外部のプログラムからデータの保存と読み出しができる。

Rails：Ruby on Rails：
スクリプト言語のRubyにより構築された、Webアプリケーション開発のためのフレームワーク。
MVC（Model-View-Controller）アーキテクチャをサポートしており、データベースに関する処理を担うモデル、
データの表示を行うビュー、それらを制御するコントローラの雛形を自動生成する機能を持っている。
データの作成・読み込み・更新・削除(CRUD)のみを行うような単純なWebアプリケーションであれば、
データテーブルの作成と雛形の自動生成を行うのみでほとんどの部分が開発できてしまう。
Webアプリケーションの多くはCRUD処理を中核としているので、Ruby on Railsを使うことによって多くのコード
の作成を自動化することができ、開発期間を短縮できる。

docker
コンテナ型の仮想化環境を提供するオープンソースソフトウェア。
アプリケーションを少ない資源で効率よく実行できる。



