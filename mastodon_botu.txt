---------------------------------
  mastodon 没メモ
    ::Admin= Lucida（lucida3rd@mstdn.mynoghra.jp）
    ::github= https://github.com/lucida3rd/skill_memo
---------------------------------

＜概要＞

よくわかんなかった技術。もしくは調整中の技術。



---------------------------------
＜注意事項＞
---------------------------------
・不完全なためどんな結果になるかわかりません。
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
・このメモを使用したことによる不具合、損害について当方は責任を持ちません。
  全て自己責任でお願いします。
・当メモの質問は受け付けません。自己対応でお願いします。






-----------------------

bundle exec rails console -e production
Account.where(domain: "<ドメイン名>").find_each do |account|
    printf("%s@%s\n", account.username, account.domain)
    account.reset_avatar!
    account.reset_header!
    account.save
end; 0

-----------------------

補足３：RAILS_ENV=productionが"libcld3.soでシンボルが見つからない"でエラーになる場合
ruby、gcc、gemが古いためbundleのライブラリシンボルがおかしくなってる可能性がある。
よって、各々を最新にし、gemのインストールをやり直すとよい。

1.最新のGCC、Rubyをインストールする。 ※別項参照のこと



2.(念のため)protobufを入れなおす
$ yum list
  ※目でprotobuf*を探す

  以下で入れなおす。
$ sudo yum -y remove protobuf*
$ sudo yum install protobuf*





3.gemをアップデートする。
$ cd /home/mastodon/live
$ gem update --system

4.bundleを消す
$ rm -rf vendor/bundle

5.gemにprotobufとpkg-configを入れる。
$ gem install protobuf
$ gem install pkg-config




5.gem installからmastodonをいれなおす。

$ gem install bundler --no-document
$ bundle install
$ yarn install --force
$ curl --compressed -o- -L https://yarnpkg.com/install.sh | bash
$ RAILS_ENV=production bundle exec rails db:migrate
$ RAILS_ENV=production bundle exec rails assets:precompile

6.mastodonサービスを再起動する。
$ sudo systemctl restart mastodon*
$ sudo systemctl status mastodon*


yum install protobuf-lite-devel


$ which bundle
/home/mastodon/.rbenv/shims/bundle



$ bundle install --redownload







3.cld3を入れなおす。
$ gem list
  ※目でcld3を探す

  以下で入れなおす。
$ gem uninstall cld3
$ gem install cld3














Mastodonをruby 2.6.5に更新するには、mastodonユーザーに切り替えて、

rbenvで最新版がとってこられるようにruby-buildを更新して、
cd /home/mastodon/.rbenv/plugins/ruby-build
git pull

ruby 2.6.5をインストールして、
RUBY_CONFIGURE_OPTS=--with-jemalloc rbenv install 2.6.5

Mastodonの使うrubyのバージョンを2.6.5に変更して、
cd /home/mastodon/live
rbenv local 2.6.5

あとはMastodonを再起動すればとりあえずOK。

rbenv versions ってやるとインストール済みのバージョンが表示されるけど、いま使っているもの以外は容量無駄に食うからけしておこう。
rbenv uninstall 2.6.4

あとでMastodonを更新する時に.ruby-versions変更したのがひっかかるから、そんときはgit stashで逃げちゃってね（雑）
#mastodon






おや？ bundler が見つかりませんとな。
can't find gem bundler (>= 0.a) with executable bundle (Gem::GemNotFoundException)

bundler は これ gem install bundler --no-ri --no-rdoc でインストールしてあるはずなのだが……？


$ which bundle
/home/mastodon/.rbenv/shims/bundle


$ gem update --system
$ gem install bundler --no-document




-----------------------
＜旧master追従＞　※v3.0.0以前

一般的なコマンド： ※mastodon v3.0.1以降対応
$ gem install bundler
ｘｘｘｘｘｘ$ bundle install --deployment --without development test

systemctl status postgres*


$ bundle install
$ yarn install
$ curl --compressed -o- -L https://yarnpkg.com/install.sh | bash
$ RAILS_ENV=production bundle exec rails db:migrate
$ RAILS_ENV=production bundle exec rails assets:precompile


9.Mastodonをリスタートし、バージョンアップを完了させる。
$ exit
# systemctl restart mastodon*
# systemctl status mastodon*

mastodon-web.service
mastodon-streaming.service
mastodon-sidekiq.service
３つのサービスがActiveであることを確認する。
また、ここまでの画面でWARNNINGが出てないことも確認する。


10.キャッシュをクリアする。
# su - mastodon
$ cd /home/mastodon/live
$ RAILS_ENV=production bin/tootctl cache clear
$ exit









-----------------------
＜branchの研究＞

https://qiita.com/konitter/items/71da5b9b40c1d20a6a11











◆stashにコメントを付ける
$ git stash save "xxxxxx"


https://qiita.com/konitter/items/71da5b9b40c1d20a6a11


◆stashの中身を確認する場合
$ git stash list
  例：
    stash@{0}: WIP on sub: a0d2f1b add fourth line
    stash@{1}: WIP on sub: 1a61919 add second line
    <stash名>: WIP on <stashを行ったブランチ名>: <ハッシュ> <コミットコメント>

git stashの参考：
https://exiz.org/20170430221314
https://qiita.com/fukajun/items/41288806e4733cb9c342








-----------------------
＜Node.jsの管理：nvmコマンド＞

mastodonのリリースノートでNode.jsをアップデートするのに、curlからapt-getを起動する方法
で記載されているが、Cent OSの場合apt-getコマンドに対応してないためこの手順では
アップデートできない。

qiitaの先輩の記事にやり方が書いてあった。
てかこれも全部書いてあります（ありがたい）。
https://qiita.com/strsk/items/925644e124efcc964625


さくらのスクリプトを使う場合、mastodonユーザにnvmコマンドを入れるようにする。

1.mastodon権限に変更する。
# su - mastodon

2.nvmをインストールする。
$ git clone git://github.com/creationix/nvm.git ~/.nvm
$ source ~/.nvm/nvm.sh

3.Node.jsのリリースバージョン一覧を表示する。
$ nvm ls-remote

このなかで「Latest LTS: Carbon」のものが最新。

4.Node.jsをインストールする。
$ nvm install [ver番号]

5.バージョンを切り替える。
$ nvm use [ver番号]

6.今使っているNode.jsのバージョンを確認する。
$ node -v
[ver番号]
ここで4で入れたバージョンが表示されていればOK。

※nvmは複数のバージョンをシステムにインストールしておいて、
　バージョンを自由に切り替えできるツールらしい。



-----------------------
＜メモリの調整：redis＞

/etc/redis.conf

redis-cli info


http://t-cyrill.hatenablog.jp/entry/2016/12/11/224604


https://github.com/yoshiya0503/my-conf/tree/master/redis





-----------------------
＜バックアップ＞




http://fnya.cocolog-nifty.com/blog/2017/10/mastodon-3861.html

https://manual.sakura.ad.jp/cloud/appliance/database/postgresql.html


$ su - mastodon
$ mkdir dbbackup
$ cd dbbackup
$ pg_dump --username=mastodon --no-owner mastodon > prefix.`date +%Y%m%d_%H%M%S`.pgdump


/home/mastodon/live
.env.production

/etc/nginx
nginx.conf

/etc/nginx/conf.d
https.conf


aws s3 sync public/system/ s3://[バケット名]/ --endpoint-url=https://s3.wasabisys.com



-----------------------
＜SSL証明書の編集：サブドメインの追加＞	★スマートじゃないやり方
スタートアップスクリプトではLet's EmcryptのSSL証明書も作成されるが、
mastodonのドメインの登録のみで、サブドメインなどでアクセスすると証明書エラーとなる。
これを解決するため、証明書の更新（サブドメインの追加）をおこなう。

参考：
https://qiita.com/chamaharun/items/566c78bb8a13b4c2bc16


1.certbotをインストールする
cd /root
yum -y install certbot --enablerepo=epel
yum install git
git clone https://github.com/certbot/certbot.git
cd certbot

上記手順だとurllib3が書き換わるのでインストールしなおす（なんとかなんないのかなこれ..）
pip install --upgrade --force-reinstall 'requests==2.6.0' urllib3

3.nginxを停止する
sudo nginx -s stop

2.certbotを起動する
/root/certbot/certbot-auto certonly

3.入力する
2
[追加するドメイン]
2

4.サーバを再起動する
reboot だと起動が中途半端なのか上手くいかないのでコンソールから実施すること。

証明書の場所
/etc/letsencrypt/live/



-----------------------
＜メールサーバ postfixのセキュリティ強化：smtps化＞

※記載中


1.ファイアーウォールでsmtpsで使うポートを開けておく。
参考：https://knowledge.sakura.ad.jp/10583/

# firewall-cmd --list-all
# firewall-cmd --add-port=***/tcp --zone=public --permanent
# firewall-cmd --reload
# firewall-cmd --list-all

2. mastosonのconfig .env.productionのメール設定を以下のようにします。
# cd /home/mastodon/live
# cat .env.production > env.production.backup  とかでバックアップ(不要なら飛ばす)
# vim .env.production

# E-mail configuration
SMTP_SERVER=127.0.0.1  # ホストのIPアドレス。自鯖内のpostfixを指定するので。
SMTP_PORT=***          # 1で開けたポート番号
SMTP_LOGIN=mastodon    # mastodonユーザ(centos)
SMTP_PASSWORD=[]       # 同パスワード
                         デフォルトだと無設定になってるかもなので予めリセットしておく
                         或いは別でメール送信用ユーザを用意してもいい。
SMTP_FROM_ADDRESS=     # 送信先として設定されるアドレス
                         通常はmastodon@[ドメイン名]となる
SMTP_AUTH_METHOD=plain
SMTP_OPENSSL_VERIFY_MODE=none
SMTP_ENABLE_STARTTLS_AUTO=true

3.postfixのコンフィグを以下のようにする。
# cd /etc/postfix
# vim main.cf

###基本
mydomain=ドメイン名              # ドメイン名
myhostname=メールサーバーの名前  # サブドメインも指定できる(MXレコードに準ずる？)
home_mailbox=maildir/            # メールボックス(いるのかな？)

###送信設定
inet_interfaces = localhost [ホストIP]
mynetworks = 127.0.0.0/8 [ホストIP(*.*.0.0)]/16

4.mastodon sidekiqとpostfixの再起動と確認。
# systemctl restart mastodon-sidekiq
# systemctl reload postfix
# systemctl restart postfix

# systemctl status mastodon-sidekiq
# systemctl status postfix.service

エラーがでてなければOK。


sudo alternatives --config mta


