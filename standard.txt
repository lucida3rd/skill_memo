---------------------------------
  プログラミングStandard(個人)
    ::Admin= Lucida（lucida3rd@mstdn.mynoghra.jp）
    ::github= https://github.com/lucida3rd/skill_memo
---------------------------------

■目的
PHPやJavaScriptなど非オブジェクト指向型言語を使用する際、複数のプログラムを組み合わせることで名前の衝突が発生する場合がある。本標準ではプログラムを記述する際の名前の付け方などのルールを設けるものとする。
尚、本標準を適用するのはC++、Javaなど高級オブジェクト指向型言語のプログラミングにおいても適用とする。



■[1]参照範囲の明示
関数や変数の一番先頭に「文字」を付加することで、参照の範囲を明示する。

g...グローバル参照(grobal、extern)。
s...静的参照(static)。静的展開。
...(修飾子なし先頭大文字) パブリック参照(public)。どのクラスからでも参照可。
...(修飾子なし先頭小文字) プライベート参照(private)。クラス内のみから参照可。
※pythonの場合、先頭__がprivate関数となるため、__小文字となる。
p...(次の文字は大文字) プロテクト参照(protected)。クラス継承を受けるもの。
__...constructやdestructなど環境で用意された特殊な関数。ユーザ宣言としない。

pythonの場合、関数に設けられた参照レベルは少ないので、以下を適用する。
g...グローバル参照(grobal、extern)。
s...静的参照(static)。静的展開。
...(修飾子なし先頭大文字) インスタンス関数。宣言が必要。
s...(次の文字は大文字) クラス関数。静的関数となる。 @classmethod（@staticmethodは使わない）
__（次の文字は小文字） プライベート関数。クラス内でのみ参照。

h...ハンドラ。イベントから参照されるもの(public扱い)。※関数のみに適用。
w...ワーク変数。関数内のみの参照。※変数のみに適用


■[2]定数の明示
定数の一番先頭に文字を付加する。以降の名称は全て「大文字」で記載する。
※[1]は適用しない

DEF...定数(define)。
CST...クラス定数(const)。



■[3]変数の用途の明示
変数に適用し、[1]もしくは[2]の参照範囲文字の次に付加する。

CHR_...char型、string型など文字。
VAL_...int型、float型など数字。
FLG_...bool型。
ARR_...配列型。phpの連想配列も適用する。
OBJ_...オブジェクト型。htmlなど構造が不定な特殊要素。
p_...ポインタ参照の場合は、上の大文字の頭に付加する。（wp_CHR_Valueなど）
※上に該当しない型には適用せず、名称から判断できるようにすればよい。(TIMEDATA型など)

例外として関数の引数には[1]を適用せず、次の文字を付加した後[3]を適用する。
in...関数の引数。原則として引き受けたらワーク変数に格納して使用するものとする。



■[4]構造の明示
構造(object)に適用し、先頭に付加する。宣言部では最後尾にも文字を付加する。

CLS...クラス(class)。構造宣言部では、最後尾に _Cls を付加する。
STR...構造体(struct)。構造宣言部では、最後尾に _Str を付加する。
UNI...共用体(union)。構造宣言部では、最後尾に _Uni を付加する。
※pythonの場合、UNIは使わない。STRも厳密には構造体ではなく、クラス変数となる。


■[5]所属プログラムの明示
非構造な関数・変数、定数、構造宣言部ではプログラム間の衝突を避けるため、
[1]ないし[2]ないし[4]の次にプログラム名の大文字を付加する。

関数：PROGRAM_Function
変数：gPROGRAM_Value
定数：DEL_CHR_PROGRAM_STRING
構造：STR_PROGRAM_Struct_Str


