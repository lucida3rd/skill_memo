-----------------------
mastodon チューニングメモ

Lucida（lucida3rd@mstdn.lucida-don.net）
-----------------------
＜概要＞
mastodonの最適化、調整技のメモ。

◆PgBouncerのインストール：CentOS版
◆mastodonのサービスチューニング
◆ImageMagic 弱小鯖向けのビルド



---------------------------------
＜注意事項＞
---------------------------------
・斜め読みしないで、各メモの効果、手順をよく確認してください。
  よくわかんないうちは使用しないでください。
・各メモには元ソースのリンクを貼り付けてますので、
  よくわかんないときはそちらも合わせて確認してください。
・このメモを使用したことによる不具合、損害について当方は責任を持ちません。
  全て自己責任でお願いします。
・当メモの質問は受け付けません。自己対応でお願いします。



-----------------------
＜PgBouncerのインストール：CentOS版＞

mastodonに用意されているサポートソフトみたいなもん？
デフォルトだとpostgreのプロセスを多めに使うためメモリを大量に使うことになる。
PgBouncerを使うとプロセスの数を調整でき、メモリの消費を抑えることができるらしい。

なお、PgBouncerのマニュアルだと手順が大分異なるのと、追加設定が必要だったりする。
参考にしたのは以下のサイトだけどだいぶ違う。

参考：
http://fnya.cocolog-nifty.com/blog/2017/12/mastodon-centos.html

要するにOSごとのリポジトリ（postgreのドライバみたいなもん？）を先にインストールする
ことになってるらしい。

1.OSのバージョンを確認する。
　さくらインターネットの場合、VPSのサービス情報に記載されている。

2.postgreのバージョンを確認する。
# psql -V

3.postgreのページからリポジトリを選ぶ。
　1と2の結果で選択できる。
https://yum.postgresql.org/repopackages.php

4.あらかじめlibeventをインストールする。 ※てかいらないんじゃね？って思った
# yum install libevent-devel

5.リポジトリをダウンロードしてインストールする。
# wget [リポジトリのURL]
# rpm -ivh [リポジトリのファイル名]

6.PgBouncerをインストールする。
# yum -y install pgbouncer
# systemctl restart pgbouncer
# systemctl enable pgbouncer

7.パスワードをリセットする。
# su - mastodon
$ psql -p 5432 -U mastodon [mastodon_production] -w
  []はDB名。もしアクセスできなかったら、mastodonのコンフィグで確認する。
  /home/mastodon/live/.env.production

> ALTER USER "mastodon" WITH PASSWORD 'password';
ALTER ROLEが出ればOK。
  passwoedの部分でパスワードを設定する。
　間違ってもpasswordとしないこと。しぬで！

\qで抜ける


8.bgBouncerにパスワードを設定する。まずiniにアクセスする。
exit
# cd /etc/pgbouncer

9.パスワードのハッシュ値を取得する。
# echo -n "パスワード+mastodon" | md5sum
   +は省略する。mastodonはユーザ名。

10.カレントにuserlist.txtを作成し、中にmastodonと9のハッシュ値を入れる。
# vim userlist.txt
書式： "mastodon" "md5[10のハッシュ値]"

11. 9.10と同じ要領でpgbouncerユーザを追加する。（パスワードも別で決め設定すること）

12.pgbouncer.ini の設定をする。

[databases]
[db名] = host=127.0.0.1 port=5432 dbname=[db名] user=mastodon password=[パスワード]    ※追加

[pgbouncer]
auth_type = md5
admin_users = pgbouncer
pool_mode = transaction

※この２つはデフォルトで問題ないけど調整可能みたい
max_client_conn = 100
default_pool_size = 20


13.保存したらpostgresqlのログイン設定をmd5に変更する。
   ※ユーザ個別、DB個別でも設定できるっぽいけど、まあまあ。
# vim /var/lib/pgsql/9.6/data/pg_hba.conf
------
# TYPE  DATABASE        USER            ADDRESS                 METHOD
###local   all             all                                     peer
local   all             all                                     md5
# IPv4 local connections:
###host    all             all             127.0.0.1/32            ident
host    all             all             127.0.0.1/32            md5
------

14.pgbouncerとpostgresqlのサービスを再起動する。
# systemctl restart postgresql*
# systemctl restart pgbouncer
    ここで何も表示がでないことを確認する。

15.接続テスト。pgbouncerからmastodonのDBに接続できることを確認する。
# psql -p 6432 -h 127.0.0.1 -U mastodon [db名]
mastodon> 
  sqlのプロンプトになればOK。 \q  で抜ける。
  auth errorで蹴られたら設定の見直し。9項あたりが怪しいと思われます。

※もしかしたらここからmastodonが接続不良になるかもなので、手早くやる。


16.mastodonのコンフィグを変更する。パスワードの設定と、DBのポートを変更する設定。
# vim /home/mastodon/live/.env.production

PREPARED_STATEMENTS=false  ※一番上のほうに追加
DB_HOST=localhost
DB_USER=mastodon
DB_NAME=[db名]
DB_PASS=[password]  ※パスワードを設定
DB_PORT=6432        ※ここも変更する

17.mastodonサービスを再起動する。
# systemctl restart mastodon*

※mastodonのページで500、502が出なくなればOK。
　5分くらい不安定になることもあるかも。



-----------------------
＜mastodonのサービスチューニング＞

上記bgBouncerを導入するのが前提になると思う。
サービスの設定を最小稼働用に見直すみたい。

また併せてjmallocの導入も行う（関連設定は★印箇所）
https://qiita.com/kumasun/items/bf4997f181f893130041
emalloc は、標準ライブラリで定義されているmalloc, free 等のメモリアロケーションAPI。
主にガベージコレクションを早く消化し、メモリリークを防止する働きがあるらしい。

補足：
・シングルコアの場合は更にrabyのファイルで処理を変更する方法もあるけど
  うちはマルチコアなのでやらなかった。
・なんかエラーが出た手順は省略した。

参考：
http://crakac.hatenablog.jp/entry/2017/12/10/121956


1.jemallocをインストールする。
# yum install jemalloc
# ls -la /usr/lib64/libjemalloc.so.1
とにかくlibjemalloc*を探す。

2.rubyをリコンパイルする。
# su - mastodon
$ cd live
$ rbenv install --list
rubyのバージョンの確認

$ RUBY_CONFIGURE_OPTS=--with-jemalloc rbenv install 2.5.1
2.5.1はrubyの最新バージョンに置き換える（無印のラストが最新安定版？）。

$ rbenv global 2.5.1
使用するrubyのバージョンを指定する。（念のため）


2.mastodon webサービスの調整。
# vim /etc/systemd/system/mastodon-web.service
......
Environment="PORT=3000"
Environment="WEB_CONCURRENCY=[コア数]"  ※以下全て追加
Environment="MAX_THREADS=5"
Environment="RUBY_GC_HEAP_INIT_SLOTS=500000"
Environment="RUBY_GC_HEAP_GROWTH_FACTOR=1.2"
Environment="RUBY_GC_HEAP_GROWTH_MAX_SLOTS=1000000"
Environment="RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO=0.1"
Environment="RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO=0.3"
Environment="RUBY_GC_HEAP_OLDOBJECT_LIMIT_FACTOR=1.2"
Environment="RUBY_GC_OLDMALLOC_LIMIT_MAX=67108864"
Environment="LD_PRELOAD=[jmallocファイルまでの絶対パス]"★
......

3.mastodon ストリームサービスの調整。
# vim /etc/systemd/system/mastodon-streaming.service
※エラーが出たので今回はいじりません。

4.mastodon sidekiqサービスの調整。
# vim /etc/systemd/system/mastodon-sidekiq.service
Environment="DB_POOL=5"
ExecStart=/home/mastodon/.rbenv/shims/bundle exec sidekiq -c 5 -q default -q mailers -q pull -q push
↓
Environment="DB_POOL=20"
Environment="RUBY_GC_HEAP_INIT_SLOTS=500000"
Environment="RUBY_GC_HEAP_GROWTH_FACTOR=1.2"
Environment="RUBY_GC_HEAP_GROWTH_MAX_SLOTS=1000000"
Environment="RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO=0.1"
Environment="RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO=0.3"
Environment="RUBY_GC_HEAP_OLDOBJECT_LIMIT_FACTOR=1.2"
Environment="RUBY_GC_OLDMALLOC_LIMIT_MAX=67108864"
Environment="LD_PRELOAD=[jmallocファイルまでの絶対パス]"★
ExecStart=/home/mastodon/.rbenv/shims/bundle exec sidekiq -c 20 -q default,1 -q push,1 -q pull,1 -q mailers,1

5.mastodonサービスを再起動する。
# systemctl daemon-reload
# systemctl restart mastodon*
   ※デーモンを先に再起動しないと怒られる

6.スワップパラメータの調整。
値は0から100まででデフォルトは60。大きいほどよくスワップする。
0にするとRAMを使いきるまでスワップしない。
100だとパフォーマンスに悪影響を及ぼすレベルでガンガンスワップする。

# sysctl vm.swappiness
vm.swappiness = [現在値]

# vim /etc/sysctl.conf
vm.swappiness = 10  ※追加

再読み込みする
# sysctl -p

※ImageMagicあたりはよくわかんなかった。



-----------------------
＜ImageMagic 弱小鯖向けのビルド＞

ImageMagicの個人makeインストール方法（CentOS版）。
あとmastodonの場合、png形式を扱う機会が多いので（iPhoneユーザ向け）
pngのライブラリも別途makeインストールする必要がある。

参考
https://gist.github.com/crakaC/9f8f33aa8179234b19148e602bc980f4#file-install_imagemagick-md


1.先にpngライブラリを展開する。
ライブラリのページからアーカイブをダウンロードする。
http://www.libpng.org/pub/png/libpng.html

# wget [アーカイブのリンク]
# tar xvzf [アーカイブファイル名]
# cd [解凍されたフォルダ]

2.メイクする。
# ./configure --enable-shared
# make

3.インストールする。
# make install

4.ImageMagicのイメージを展開する。
ライブラリのフォルダからrootに移ってから作業する。
# cd ..
# wget https://www.imagemagick.org/download/ImageMagick.tar.gz
# tar xvzf ImageMagick.tar.gz
# cd [解凍されたフォルダ]

5.おまじない？？？
実行するとコケるけど気にしない。
pngのライブラリパスを通すことをやってるらしい。
# export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
# ./configure LDFLAGS='-L/usr/local/lib -R/usr/local/lib'

6.オプションを変更する
--with-quantum-depth  ※画像のbit数指定。デフォルトで16bitだけど、普通は8bitでも十分らしい。
--disable-openmp      ※シングルコアの場合効果あり
--without-threads     ※シングルコアの場合効果あり
--disable-hdri        ※HDRI変換を無効にすることでリソースが抑えられる
--with-png            ※pngの有効化。付けなくてもいい気もする。

★シングルコア向け
# ./configure --disable-hdri --with-quantum-depth=8 --with-png --disable-openmp --without-threads
# make

★マルチコア向け
# ./configure --disable-hdri --with-quantum-depth=8 --with-png
# make

実行したあと最後に表示される有効オプション結果はコピペで控えておいたほうがいいかも。
このとき--with-pngがyesになってることを確認する。
noのままであれば5でがんばってパスを通すこと。（どうやるんぢゃ？）

7.インストールする。
# make install
# ldconfig /usr/local/lib  ※やらなくていい気もする

8.動作確認
# convert -version
  今日の日付で～Q8～であればOK。
  いちおmastodon権限でも試してみる。


その他：
何らかの不手際でリメイクするときはmakeファイルをクリアすること。
# make clean


